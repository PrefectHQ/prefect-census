{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-census","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>This collection contains Prefect integrations for working with Census.</p> <p>Census is an Operational Analytics platform that enables you to sync your trusted analytics data from your hub into operational tools that your business teams use on a daily basis.</p> <p>Some things you can do with this collection out-of-the-box include: - Trigger a Census sync run and wait for it to finish (see how) - Call a custom endpoint with a <code>CensusClient</code> using your <code>CensusCredentials</code> (see how)</p> <p>For information on how to get started with Census, refer to the Census docs.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-census</code> with <code>pip</code>:</p> <pre><code>pip install prefect-census\n</code></pre> <p>A list of available blocks in <code>prefect-census</code> and their setup instructions can be found here.</p>"},{"location":"#get-a-census-api-key","title":"Get a Census API Key","text":"<p>You will need a Census API key to be able to use the integrations in this collection. </p> <p>For directions for how to generate a Census API key, refer to the Getting API Access section of the Census docs.</p> <p>Once you have a Census API key, you can configure a <code>CensusCredentials</code> block in the Prefect UI for use with the integrations in this collection. For information about how to configure a block in the Prefect UI, refer to the Prefect docs.</p>"},{"location":"#note","title":"\ud83d\udca1  NOTE","text":"<p>All Census Syncs are incremental, which means they only capture records that are new or changed data since the previous sync.</p>"},{"location":"#write-and-run-a-flow","title":"Write and run a flow","text":""},{"location":"#use-a-censussync-job-block-to-run-a-sync-and-wait-for-completion","title":"Use a <code>CensusSync</code> job block to run a sync and wait for completion","text":"<pre><code>from prefect import flow\nfrom prefect_census import (\n    CensusCredentials, CensusSync, run_census_sync\n)\n\ncensus_sync = CensusSync(\n    credentials=CensusCredentials(api_key=\"my_api_key\"),\n    sync_id=42\n)\n\n@flow\ndef my_census_flow():\n    # do some setup\n\n    run_census_sync(census_sync)\n\n    # do some cleanup\n</code></pre>"},{"location":"#get-census-sync-run-info","title":"Get Census sync run info:","text":"<pre><code>from prefect import flow\n\nfrom prefect_census import CensusCredentials\nfrom prefect_census.runs import get_census_sync_run_info\n\n@flow\ndef get_sync_run_info_flow():\n    credentials = CensusCredentials(api_key=\"my_api_key\")\n\n    return get_census_sync_run_info(\n        credentials=credentials,\n        run_id=42\n    )\n\nget_sync_run_info_flow()\n</code></pre>"},{"location":"#call-a-custom-endpoint","title":"Call a custom endpoint:","text":"<pre><code>from prefect import flow\nfrom prefect_census import CensusCredentials\nfrom prefect_census.client import CensusClient\n\n@flow\ndef my_flow(sync_id):\n    creds_block = CensusCredentials(api_key=\"my_api_key\")\n\n    client = CensusClient(\n        api_key=creds_block.api_key.get_secret_value()    \n    )\n    response = client.call_endpoint(\n        http_method=\"GET\", path=f\"/syncs/{sync_id}\"\n    )\n    return response\n\nmy_flow(42)\n</code></pre> <p>For more tips on how to use tasks and flows in a Collection, check out Using Collections!</p>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter any bugs while using <code>prefect-census</code>, feel free to open an issue in the prefect-census repository.</p> <p>If you have any questions or issues while using <code>prefect-census</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to star or watch <code>prefect-census</code> for updates too!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you'd like to help contribute to fix an issue or add a feature to <code>prefect-census</code>, please propose changes through a pull request from a fork of the repository.</p> <p>Here are the steps: 1. Fork the repository 2. Clone the forked repository 3. Install the repository and its dependencies: <pre><code>pip install -e \".[dev]\"\n</code></pre> 4. Make desired changes 5. Add tests 6. Insert an entry to CHANGELOG.md 7. Install <code>pre-commit</code> to perform quality checks prior to commit: <pre><code>pre-commit install\n</code></pre> 8. <code>git commit</code>, <code>git push</code>, and create a pull request</p>"},{"location":"client/","title":"Client","text":""},{"location":"client/#prefect_census.client","title":"<code>prefect_census.client</code>","text":"<p>Module containing client for interacting with the Census API</p>"},{"location":"client/#prefect_census.client-classes","title":"Classes","text":""},{"location":"client/#prefect_census.client.CensusClient","title":"<code>CensusClient</code>","text":"<p>Client for interacting with the Census API.</p> <p>Attributes:</p> Name Type Description <code>api_key</code> <code>str</code> <p>API key to authenticate with the Census API.</p> Source code in <code>prefect_census/client.py</code> <pre><code>class CensusClient:\n\"\"\"\n    Client for interacting with the Census API.\n\n    Attributes:\n        api_key (str): API key to authenticate with the Census API.\n    \"\"\"\n\n    def __init__(self, api_key: str):\n        self._closed = False\n        self._started = False\n\n        self.client = AsyncClient(\n            base_url=\"https://app.getcensus.com/api/v1\",\n            headers={\n                \"Authorization\": f\"Bearer {api_key}\",\n                \"user-agent\": f\"prefect-{prefect.__version__}\",\n            },\n        )\n\n    @sync_compatible\n    async def call_endpoint(\n        self,\n        http_method: str,\n        path: str,\n        params: Optional[Dict[str, Any]] = None,\n        json: Optional[Dict[str, Any]] = None,\n    ) -&gt; Response:\n\"\"\"\n        Call an endpoint in the Census API.\n\n        Args:\n            http_method: HTTP method to call on the endpoint.\n            path: The partial path for request (e.g. /syncs/42). Will be\n                appended onto the base URL as determined by the client configuration.\n            params: Query parameters to include in the request.\n            json: JSON serializable body to send in the request.\n\n        Returns:\n            The response from the Census API.\n\n        Example:\n            ```python\n            from prefect import flow\n            from prefect_census import CensusCredentials\n            from prefect_census.client import CensusClient\n\n            @flow\n            def my_flow(sync_id):\n                creds_block = CensusCredentials(api_key=\"my_api_key\")\n\n                client = CensusClient(\n                    api_key=creds_block.api_key.get_secret_value()\n                )\n                response = client.call_endpoint(\n                    http_method=\"GET\",\n                    path=f\"/syncs/{sync_id}\"\n                )\n                return response\n\n            my_flow(42)\n            ```\n        \"\"\"\n\n        response = await self.client.request(\n            method=http_method, url=path, params=params, json=json\n        )\n        response.raise_for_status()\n        return response\n\n    @sync_compatible\n    async def get_run_info(self, run_id: int) -&gt; Response:\n\"\"\"\n        Sends a request to the [get sync id info endpoint](https://docs.getcensus.com/basics/api/syncs#get-syncs-id)\n\n        Args:\n            run_id: The ID of the sync run to get details for.\n\n        Returns:\n            The response from the Census API.\n        \"\"\"  # noqa\n        return await self.call_endpoint(\n            http_method=\"GET\",\n            path=f\"/sync_runs/{run_id}\",\n        )\n\n    @sync_compatible\n    async def trigger_sync_run(\n        self, sync_id: int, force_full_sync: bool = False\n    ) -&gt; Response:\n\"\"\"\n        Sends a request to the [trigger sync run endpoint](https://docs.getcensus.com/basics/api/sync-runs)\n        to initiate a sync run.\n\n        Args:\n            sync_id: The ID of the sync to trigger.\n            force_full_sync: If the sync should perform a full sync.\n\n        Returns:\n            The response from the Census API.\n        \"\"\"  # noqa\n        return await self.call_endpoint(\n            http_method=\"POST\",\n            path=f\"/syncs/{sync_id}/trigger\",\n            params={\"force_full_sync\": force_full_sync},\n        )\n\n    async def __aenter__(self):\n\"\"\"Async context manager entry method.\"\"\"\n        if self._closed:\n            raise RuntimeError(\n                \"The client cannot be started again after it has been closed.\"\n            )\n        if self._started:\n            raise RuntimeError(\"The client cannot be started more than once.\")\n\n        self._started = True\n        return self\n\n    async def __aexit__(self, *exc):\n\"\"\"Async context manager exit method.\"\"\"\n        self._closed = True\n        await self.client.__aexit__()\n</code></pre>"},{"location":"client/#prefect_census.client.CensusClient-functions","title":"Functions","text":""},{"location":"client/#prefect_census.client.CensusClient.__aenter__","title":"<code>__aenter__</code>  <code>async</code>","text":"<p>Async context manager entry method.</p> Source code in <code>prefect_census/client.py</code> <pre><code>async def __aenter__(self):\n\"\"\"Async context manager entry method.\"\"\"\n    if self._closed:\n        raise RuntimeError(\n            \"The client cannot be started again after it has been closed.\"\n        )\n    if self._started:\n        raise RuntimeError(\"The client cannot be started more than once.\")\n\n    self._started = True\n    return self\n</code></pre>"},{"location":"client/#prefect_census.client.CensusClient.__aexit__","title":"<code>__aexit__</code>  <code>async</code>","text":"<p>Async context manager exit method.</p> Source code in <code>prefect_census/client.py</code> <pre><code>async def __aexit__(self, *exc):\n\"\"\"Async context manager exit method.\"\"\"\n    self._closed = True\n    await self.client.__aexit__()\n</code></pre>"},{"location":"client/#prefect_census.client.CensusClient.call_endpoint","title":"<code>call_endpoint</code>  <code>async</code>","text":"<p>Call an endpoint in the Census API.</p> <p>Parameters:</p> Name Type Description Default <code>http_method</code> <code>str</code> <p>HTTP method to call on the endpoint.</p> required <code>path</code> <code>str</code> <p>The partial path for request (e.g. /syncs/42). Will be appended onto the base URL as determined by the client configuration.</p> required <code>params</code> <code>Optional[Dict[str, Any]]</code> <p>Query parameters to include in the request.</p> <code>None</code> <code>json</code> <code>Optional[Dict[str, Any]]</code> <p>JSON serializable body to send in the request.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>The response from the Census API.</p> Example <pre><code>from prefect import flow\nfrom prefect_census import CensusCredentials\nfrom prefect_census.client import CensusClient\n\n@flow\ndef my_flow(sync_id):\n    creds_block = CensusCredentials(api_key=\"my_api_key\")\n\n    client = CensusClient(\n        api_key=creds_block.api_key.get_secret_value()\n    )\n    response = client.call_endpoint(\n        http_method=\"GET\",\n        path=f\"/syncs/{sync_id}\"\n    )\n    return response\n\nmy_flow(42)\n</code></pre> Source code in <code>prefect_census/client.py</code> <pre><code>@sync_compatible\nasync def call_endpoint(\n    self,\n    http_method: str,\n    path: str,\n    params: Optional[Dict[str, Any]] = None,\n    json: Optional[Dict[str, Any]] = None,\n) -&gt; Response:\n\"\"\"\n    Call an endpoint in the Census API.\n\n    Args:\n        http_method: HTTP method to call on the endpoint.\n        path: The partial path for request (e.g. /syncs/42). Will be\n            appended onto the base URL as determined by the client configuration.\n        params: Query parameters to include in the request.\n        json: JSON serializable body to send in the request.\n\n    Returns:\n        The response from the Census API.\n\n    Example:\n        ```python\n        from prefect import flow\n        from prefect_census import CensusCredentials\n        from prefect_census.client import CensusClient\n\n        @flow\n        def my_flow(sync_id):\n            creds_block = CensusCredentials(api_key=\"my_api_key\")\n\n            client = CensusClient(\n                api_key=creds_block.api_key.get_secret_value()\n            )\n            response = client.call_endpoint(\n                http_method=\"GET\",\n                path=f\"/syncs/{sync_id}\"\n            )\n            return response\n\n        my_flow(42)\n        ```\n    \"\"\"\n\n    response = await self.client.request(\n        method=http_method, url=path, params=params, json=json\n    )\n    response.raise_for_status()\n    return response\n</code></pre>"},{"location":"client/#prefect_census.client.CensusClient.get_run_info","title":"<code>get_run_info</code>  <code>async</code>","text":"<p>Sends a request to the get sync id info endpoint</p> <p>Parameters:</p> Name Type Description Default <code>run_id</code> <code>int</code> <p>The ID of the sync run to get details for.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>The response from the Census API.</p> Source code in <code>prefect_census/client.py</code> <pre><code>@sync_compatible\nasync def get_run_info(self, run_id: int) -&gt; Response:\n\"\"\"\n    Sends a request to the [get sync id info endpoint](https://docs.getcensus.com/basics/api/syncs#get-syncs-id)\n\n    Args:\n        run_id: The ID of the sync run to get details for.\n\n    Returns:\n        The response from the Census API.\n    \"\"\"  # noqa\n    return await self.call_endpoint(\n        http_method=\"GET\",\n        path=f\"/sync_runs/{run_id}\",\n    )\n</code></pre>"},{"location":"client/#prefect_census.client.CensusClient.trigger_sync_run","title":"<code>trigger_sync_run</code>  <code>async</code>","text":"<p>Sends a request to the trigger sync run endpoint to initiate a sync run.</p> <p>Parameters:</p> Name Type Description Default <code>sync_id</code> <code>int</code> <p>The ID of the sync to trigger.</p> required <code>force_full_sync</code> <code>bool</code> <p>If the sync should perform a full sync.</p> <code>False</code> <p>Returns:</p> Type Description <code>Response</code> <p>The response from the Census API.</p> Source code in <code>prefect_census/client.py</code> <pre><code>@sync_compatible\nasync def trigger_sync_run(\n    self, sync_id: int, force_full_sync: bool = False\n) -&gt; Response:\n\"\"\"\n    Sends a request to the [trigger sync run endpoint](https://docs.getcensus.com/basics/api/sync-runs)\n    to initiate a sync run.\n\n    Args:\n        sync_id: The ID of the sync to trigger.\n        force_full_sync: If the sync should perform a full sync.\n\n    Returns:\n        The response from the Census API.\n    \"\"\"  # noqa\n    return await self.call_endpoint(\n        http_method=\"POST\",\n        path=f\"/syncs/{sync_id}/trigger\",\n        params={\"force_full_sync\": force_full_sync},\n    )\n</code></pre>"},{"location":"credentials/","title":"Credentials","text":""},{"location":"credentials/#prefect_census.credentials","title":"<code>prefect_census.credentials</code>","text":"<p>Module containing credentials for interacting with Census.</p>"},{"location":"credentials/#prefect_census.credentials-classes","title":"Classes","text":""},{"location":"credentials/#prefect_census.credentials.CensusCredentials","title":"<code>CensusCredentials</code>","text":"<p>         Bases: <code>CredentialsBlock</code></p> <p>Credentials block for credential use across Census tasks and flows.</p> <p>Attributes:</p> Name Type Description <code>api_key</code> <code>SecretStr</code> <p>API key to authenticate with the Census API. Refer to the Census authentication docs for retrieving the API key.</p> <p>Examples:</p> <p>Load stored Census credentials: <pre><code>from prefect_census import CensusCredentials\n\ncensus_creds = CensusCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> <p>Use CensusCredentials instance to trigger a sync run: <pre><code>import asyncio\nfrom prefect import flow\nfrom prefect_census import CensusCredentials\n\ncredentials = CensusCredentials(api_key=\"my_api_key\")\n\n@flow\nasync def trigger_sync_run_flow():\n    async with credentials.get_client() as client:\n        await client.trigger_sync_run(sync_id=42)\n\nasyncio.run(trigger_sync_run_flow())\n</code></pre></p> <p>Load saved Census credentials within a flow: <pre><code>from prefect import flow\n\nfrom prefect_census import CensusCredentials\nfrom prefect_census.syncs import trigger_census_sync\n\n@flow\ndef trigger_census_sync_run_flow():\n    credentials = CensusCredentials.load(\"my-census-credentials\")\n    trigger_census_sync(credentials=credentials, sync_id=42)\n\ntrigger_census_sync_run_flow()\n</code></pre></p> Source code in <code>prefect_census/credentials.py</code> <pre><code>class CensusCredentials(CredentialsBlock):\n\"\"\"\n    Credentials block for credential use across Census tasks and flows.\n\n    Attributes:\n        api_key: API key to authenticate with the Census\n            API. Refer to the [Census authentication docs](\n            https://docs.getcensus.com/basics/api#getting-api-access)\n            for retrieving the API key.\n\n    Examples:\n        Load stored Census credentials:\n        ```python\n        from prefect_census import CensusCredentials\n\n        census_creds = CensusCredentials.load(\"BLOCK_NAME\")\n        ```\n\n        Use CensusCredentials instance to trigger a sync run:\n        ```python\n        import asyncio\n        from prefect import flow\n        from prefect_census import CensusCredentials\n\n        credentials = CensusCredentials(api_key=\"my_api_key\")\n\n        @flow\n        async def trigger_sync_run_flow():\n            async with credentials.get_client() as client:\n                await client.trigger_sync_run(sync_id=42)\n\n        asyncio.run(trigger_sync_run_flow())\n        ```\n\n        Load saved Census credentials within a flow:\n        ```python\n        from prefect import flow\n\n        from prefect_census import CensusCredentials\n        from prefect_census.syncs import trigger_census_sync\n\n        @flow\n        def trigger_census_sync_run_flow():\n            credentials = CensusCredentials.load(\"my-census-credentials\")\n            trigger_census_sync(credentials=credentials, sync_id=42)\n\n        trigger_census_sync_run_flow()\n        ```\n    \"\"\"\n\n    _block_type_name = \"Census Credentials\"\n    _documentation_url = \"https://prefecthq.github.io/prefect-census/credentials/\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/3oznRx2UFkd2XyqNkEZpzB/4e0967a828aec5e2527cedadf8d24e8a/llmjpn8a0pgu8szjmnyi.webp?h=250\"  # noqa\n\n    api_key: SecretStr = Field(\n        ..., title=\"API Key\", description=\"API key to authenticate with the Census API.\"\n    )\n\n    def get_client(self) -&gt; CensusClient:\n\"\"\"\n        Provides an authenticated client for working with the Census API.\n\n        Returns:\n            A authenticated Census API client\n        \"\"\"\n        return CensusClient(api_key=self.api_key.get_secret_value())\n</code></pre>"},{"location":"credentials/#prefect_census.credentials.CensusCredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_census.credentials.CensusCredentials.get_client","title":"<code>get_client</code>","text":"<p>Provides an authenticated client for working with the Census API.</p> <p>Returns:</p> Type Description <code>CensusClient</code> <p>A authenticated Census API client</p> Source code in <code>prefect_census/credentials.py</code> <pre><code>def get_client(self) -&gt; CensusClient:\n\"\"\"\n    Provides an authenticated client for working with the Census API.\n\n    Returns:\n        A authenticated Census API client\n    \"\"\"\n    return CensusClient(api_key=self.api_key.get_secret_value())\n</code></pre>"},{"location":"flows/","title":"Flows","text":""},{"location":"flows/#prefect_census.flows","title":"<code>prefect_census.flows</code>","text":"<p>Prefect flows for interacting with Census.</p>"},{"location":"flows/#prefect_census.flows-classes","title":"Classes","text":""},{"location":"flows/#prefect_census.flows-functions","title":"Functions","text":""},{"location":"flows/#prefect_census.flows.run_census_sync","title":"<code>run_census_sync</code>  <code>async</code>","text":"<p>A flow for triggering a Census sync run and waiting for completion.</p> <p>Parameters:</p> Name Type Description Default <code>census_sync</code> <code>CensusSync</code> <p>The Census sync job block to trigger.</p> required <p>Returns:</p> Type Description <p>The result of the sync run.</p> Source code in <code>prefect_census/flows.py</code> <pre><code>@flow\nasync def run_census_sync(census_sync: CensusSync):\n\"\"\"A flow for triggering a Census sync run and waiting for completion.\n\n    Args:\n        census_sync: The Census sync job block to trigger.\n\n    Returns:\n        The result of the sync run.\n    \"\"\"\n    census_sync_run = await task(census_sync.trigger.aio)(census_sync)\n\n    sync_status = await task(census_sync_run.wait_for_completion.aio)(census_sync_run)\n\n    return await task(census_sync_run.fetch_result.aio)(\n        census_sync_run, wait_for=[sync_status]\n    )\n</code></pre>"},{"location":"runs/","title":"Runs","text":""},{"location":"runs/#prefect_census.runs","title":"<code>prefect_census.runs</code>","text":"<p>Module containing tasks and flows for interacting with Census sync runs</p>"},{"location":"runs/#prefect_census.runs-classes","title":"Classes","text":""},{"location":"runs/#prefect_census.runs.CensusGetSyncRunInfoFailed","title":"<code>CensusGetSyncRunInfoFailed</code>","text":"<p>         Bases: <code>RuntimeError</code></p> <p>Used to idicate retrieve sync run info.</p> Source code in <code>prefect_census/runs.py</code> <pre><code>class CensusGetSyncRunInfoFailed(RuntimeError):\n\"\"\"Used to idicate retrieve sync run info.\"\"\"\n</code></pre>"},{"location":"runs/#prefect_census.runs.CensusSyncRunCancelled","title":"<code>CensusSyncRunCancelled</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Raised when a triggered sync run is cancelled</p> Source code in <code>prefect_census/runs.py</code> <pre><code>class CensusSyncRunCancelled(Exception):\n\"\"\"Raised when a triggered sync run is cancelled\"\"\"\n</code></pre>"},{"location":"runs/#prefect_census.runs.CensusSyncRunFailed","title":"<code>CensusSyncRunFailed</code>","text":"<p>         Bases: <code>RuntimeError</code></p> <p>Raised when unable to retrieve Census sync run</p> Source code in <code>prefect_census/runs.py</code> <pre><code>class CensusSyncRunFailed(RuntimeError):\n\"\"\"Raised when unable to retrieve Census sync run\"\"\"\n</code></pre>"},{"location":"runs/#prefect_census.runs.CensusSyncRunStatus","title":"<code>CensusSyncRunStatus</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Census sync statuses.</p> Source code in <code>prefect_census/runs.py</code> <pre><code>class CensusSyncRunStatus(Enum):\n\"\"\"Census sync statuses.\"\"\"\n\n    CANCELLED = \"cancelled\"\n    WORKING = \"working\"\n    FAILED = \"failed\"\n    COMPLETED = \"completed\"\n    SKIPPED = \"skipped\"\n\n    @classmethod\n    def is_terminal_status_code(cls, status_code: str) -&gt; bool:\n\"\"\"\n        Returns True if a status code is terminal for a sync run.\n        Returns False otherwise.\n        \"\"\"\n        return status_code in [\n            cls.CANCELLED.value,\n            cls.FAILED.value,\n            cls.COMPLETED.value,\n            cls.SKIPPED.value,\n        ]\n</code></pre>"},{"location":"runs/#prefect_census.runs.CensusSyncRunStatus-functions","title":"Functions","text":""},{"location":"runs/#prefect_census.runs.CensusSyncRunStatus.is_terminal_status_code","title":"<code>is_terminal_status_code</code>  <code>classmethod</code>","text":"<p>Returns True if a status code is terminal for a sync run. Returns False otherwise.</p> Source code in <code>prefect_census/runs.py</code> <pre><code>@classmethod\ndef is_terminal_status_code(cls, status_code: str) -&gt; bool:\n\"\"\"\n    Returns True if a status code is terminal for a sync run.\n    Returns False otherwise.\n    \"\"\"\n    return status_code in [\n        cls.CANCELLED.value,\n        cls.FAILED.value,\n        cls.COMPLETED.value,\n        cls.SKIPPED.value,\n    ]\n</code></pre>"},{"location":"runs/#prefect_census.runs.CensusSyncRunTimeout","title":"<code>CensusSyncRunTimeout</code>","text":"<p>         Bases: <code>RuntimeError</code></p> <p>Raised when a triggered job run does not complete in the configured max wait seconds</p> Source code in <code>prefect_census/runs.py</code> <pre><code>class CensusSyncRunTimeout(RuntimeError):\n\"\"\"\n    Raised when a triggered job run does not complete in the configured max\n    wait seconds\n    \"\"\"\n</code></pre>"},{"location":"runs/#prefect_census.runs-functions","title":"Functions","text":""},{"location":"runs/#prefect_census.runs.get_census_sync_run_info","title":"<code>get_census_sync_run_info</code>  <code>async</code>","text":"<p>A task to retrieve information a Census sync run.</p> <p>Parameters:</p> Name Type Description Default <code>credentials</code> <code>CensusCredentials</code> <p>Credentials for authenticating with Census.</p> required <code>run_id</code> <code>int</code> <p>The ID of the run of the sync to trigger.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The run data returned by the Census API as dict with the following shape: <pre><code>{\n    \"id\": 94,\n    \"sync_id\": 52,\n    \"source_record_count\": 1,\n    \"records_processed\": 1,\n    \"records_updated\": 1,\n    \"records_failed\": 0,\n    \"records_invalid\": 0,\n    \"created_at\": \"2021-10-20T02:51:07.546Z\",\n    \"updated_at\": \"2021-10-20T02:52:29.236Z\",\n    \"completed_at\": \"2021-10-20T02:52:29.234Z\",\n    \"scheduled_execution_time\": null,\n    \"error_code\": null,\n    \"error_message\": null,\n    \"error_detail\": null,\n    \"status\": \"completed\",\n    \"canceled\": false,\n    \"full_sync\": true,\n    \"sync_trigger_reason\": {\n        \"ui_tag\": \"Manual\",\n        \"ui_detail\": \"Manually triggered by test@getcensus.com\"\n    }\n}\n</code></pre></p> Example <p>Get Census sync run info: <pre><code>from prefect import flow\n\nfrom prefect_census import CensusCredentials\nfrom prefect_census.runs import get_census_sync_run_info\n\n@flow\ndef get_sync_run_info_flow():\n    credentials = CensusCredentials(api_key=\"my_api_key\")\n\n    return get_census_sync_run_info(\n        credentials=credentials,\n        run_id=42\n    )\n\nget_sync_run_info_flow()\n</code></pre></p> Source code in <code>prefect_census/runs.py</code> <pre><code>@task(\n    name=\"Get Census sync run details\",\n    description=(\n        \"Retrieves details of a Census sync run\" \"for the sync with the given sync_id.\"\n    ),\n    retries=3,\n    retry_delay_seconds=10,\n)\nasync def get_census_sync_run_info(\n    credentials: CensusCredentials, run_id: int\n) -&gt; Dict[str, Any]:\n\"\"\"\n    A task to retrieve information a Census sync run.\n\n    Args:\n        credentials: Credentials for authenticating with Census.\n        run_id: The ID of the run of the sync to trigger.\n\n    Returns:\n        The run data returned by the Census API as dict with the following shape:\n            ```\n            {\n                \"id\": 94,\n                \"sync_id\": 52,\n                \"source_record_count\": 1,\n                \"records_processed\": 1,\n                \"records_updated\": 1,\n                \"records_failed\": 0,\n                \"records_invalid\": 0,\n                \"created_at\": \"2021-10-20T02:51:07.546Z\",\n                \"updated_at\": \"2021-10-20T02:52:29.236Z\",\n                \"completed_at\": \"2021-10-20T02:52:29.234Z\",\n                \"scheduled_execution_time\": null,\n                \"error_code\": null,\n                \"error_message\": null,\n                \"error_detail\": null,\n                \"status\": \"completed\",\n                \"canceled\": false,\n                \"full_sync\": true,\n                \"sync_trigger_reason\": {\n                    \"ui_tag\": \"Manual\",\n                    \"ui_detail\": \"Manually triggered by test@getcensus.com\"\n                }\n            }\n            ```\n\n\n    Example:\n        Get Census sync run info:\n        ```python\n        from prefect import flow\n\n        from prefect_census import CensusCredentials\n        from prefect_census.runs import get_census_sync_run_info\n\n        @flow\n        def get_sync_run_info_flow():\n            credentials = CensusCredentials(api_key=\"my_api_key\")\n\n            return get_census_sync_run_info(\n                credentials=credentials,\n                run_id=42\n            )\n\n        get_sync_run_info_flow()\n        ```\n    \"\"\"  # noqa\n    try:\n        async with credentials.get_client() as client:\n            response = await client.get_run_info(run_id)\n    except HTTPStatusError as e:\n        raise CensusGetSyncRunInfoFailed(extract_user_message(e)) from e\n\n    return response.json()[\"data\"]\n</code></pre>"},{"location":"runs/#prefect_census.runs.wait_census_sync_completion","title":"<code>wait_census_sync_completion</code>  <code>async</code>","text":"<p>Wait for the given Census sync run to finish running.</p> <p>Parameters:</p> Name Type Description Default <code>run_id</code> <code>int</code> <p>The ID of the sync run to wait for.</p> required <code>credentials</code> <code>CensusCredentials</code> <p>Credentials for authenticating with Census.</p> required <code>max_wait_seconds</code> <code>int</code> <p>Maximum number of seconds to wait for sync to complete.</p> <code>60</code> <code>poll_frequency_seconds</code> <code>int</code> <p>Number of seconds to wait in between checks for run completion.</p> <code>5</code> <p>Raises:</p> Type Description <code>CensusSyncRunTimeout</code> <p>When the elapsed wait time exceeds <code>max_wait_seconds</code>.</p> <p>Returns:</p> Name Type Description <code>run_status</code> <code>CensusSyncRunStatus</code> <p>An enum representing the final Census sync run status.</p> <code>run_data</code> <code>Dict[str, Any]</code> <p>A dictionary containing information about the run after completion in the following shape: <pre><code>{\n    \"id\": 94,\n    \"sync_id\": 52,\n    \"source_record_count\": 1,\n    \"records_processed\": 1,\n    \"records_updated\": 1,\n    \"records_failed\": 0,\n    \"records_invalid\": 0,\n    \"created_at\": \"2021-10-20T02:51:07.546Z\",\n    \"updated_at\": \"2021-10-20T02:52:29.236Z\",\n    \"completed_at\": \"2021-10-20T02:52:29.234Z\",\n    \"scheduled_execution_time\": null,\n    \"error_code\": null,\n    \"error_message\": null,\n    \"error_detail\": null,\n    \"status\": \"completed\",\n    \"canceled\": false,\n    \"full_sync\": true,\n    \"sync_trigger_reason\": {\n        \"ui_tag\": \"Manual\",\n        \"ui_detail\": \"Manually triggered by test@getcensus.com\"\n    }\n}\n</code></pre></p> Source code in <code>prefect_census/runs.py</code> <pre><code>@flow(\n    name=\"Wait for Census sync run\",\n    description=\"Waits for the Census sync run to finish running.\",\n)\nasync def wait_census_sync_completion(\n    run_id: int,\n    credentials: CensusCredentials,\n    max_wait_seconds: int = 60,\n    poll_frequency_seconds: int = 5,\n) -&gt; Tuple[CensusSyncRunStatus, Dict[str, Any]]:\n\"\"\"\n    Wait for the given Census sync run to finish running.\n\n    Args:\n        run_id: The ID of the sync run to wait for.\n        credentials: Credentials for authenticating with Census.\n        max_wait_seconds: Maximum number of seconds to wait for sync to complete.\n        poll_frequency_seconds: Number of seconds to wait in between checks for\n            run completion.\n\n    Raises:\n        CensusSyncRunTimeout: When the elapsed wait time exceeds `max_wait_seconds`.\n\n    Returns:\n        run_status: An enum representing the final Census sync run status.\n        run_data: A dictionary containing information about the run after completion\n            in the following shape:\n            ```\n            {\n                \"id\": 94,\n                \"sync_id\": 52,\n                \"source_record_count\": 1,\n                \"records_processed\": 1,\n                \"records_updated\": 1,\n                \"records_failed\": 0,\n                \"records_invalid\": 0,\n                \"created_at\": \"2021-10-20T02:51:07.546Z\",\n                \"updated_at\": \"2021-10-20T02:52:29.236Z\",\n                \"completed_at\": \"2021-10-20T02:52:29.234Z\",\n                \"scheduled_execution_time\": null,\n                \"error_code\": null,\n                \"error_message\": null,\n                \"error_detail\": null,\n                \"status\": \"completed\",\n                \"canceled\": false,\n                \"full_sync\": true,\n                \"sync_trigger_reason\": {\n                    \"ui_tag\": \"Manual\",\n                    \"ui_detail\": \"Manually triggered by test@getcensus.com\"\n                }\n            }\n            ```\n\n    \"\"\"\n    logger = get_run_logger()\n    seconds_waited_for_run_completion = 0\n    wait_for = []\n    while seconds_waited_for_run_completion &lt;= max_wait_seconds:\n        run_data_future = await get_census_sync_run_info.submit(\n            credentials=credentials,\n            run_id=run_id,\n            wait_for=wait_for,\n        )\n        run_data = await run_data_future.result()\n        run_status = run_data.get(\"status\")\n\n        if CensusSyncRunStatus.is_terminal_status_code(run_status):\n            return CensusSyncRunStatus(run_status), run_data\n\n        wait_for = [run_data_future]\n        logger.info(\n            \"Census sync run with ID %i has status %s. Waiting for %i seconds.\",\n            run_id,\n            CensusSyncRunStatus(run_status).name,\n            poll_frequency_seconds,\n        )\n        await asyncio.sleep(poll_frequency_seconds)\n        seconds_waited_for_run_completion += poll_frequency_seconds\n\n    raise CensusSyncRunTimeout(\n        f\"Max wait time of {max_wait_seconds} seconds exceeded while waiting \"\n        f\"for sync run with ID {run_id}\"\n    )\n</code></pre>"},{"location":"syncs/","title":"Syncs","text":""},{"location":"syncs/#prefect_census.syncs","title":"<code>prefect_census.syncs</code>","text":"<p>Module containing tasks and flows for interacting with Census syncs.</p>"},{"location":"syncs/#prefect_census.syncs-classes","title":"Classes","text":""},{"location":"syncs/#prefect_census.syncs.CensusSync","title":"<code>CensusSync</code>","text":"<p>         Bases: <code>JobBlock</code></p> <p>A Job Block for triggering a Census sync run and waiting for completion.</p> <p>Attributes:</p> Name Type Description <code>credentials</code> <code>CensusCredentials</code> <p>Credentials for authenticating with Census.</p> <code>sync_id</code> <code>int</code> <p>The ID of the sync to trigger.</p> <code>force_full_sync</code> <code>bool</code> <p>If <code>True</code>, a full sync will be triggered.</p> <code>max_wait_seconds</code> <code>int</code> <p>Maximum number of seconds to wait for sync to complete.</p> <code>poll_frequency_seconds</code> <code>int</code> <p>Number of seconds to wait in between checks for run completion.</p> Example <p>Trigger a Census sync and wait for completion as a subflow: <pre><code>from prefect import flow\nfrom prefect_census import CensusSync, run_census_sync\n\n@flow\ndef my_census_flow():\n    census_sync = CensusSync.load(\"BLOCK_NAME\")\n\n    # do some setup\n\n    run_census_sync(census_sync)\n\n    # do some cleanup\n</code></pre></p> Source code in <code>prefect_census/syncs.py</code> <pre><code>class CensusSync(JobBlock):\n\"\"\"\n    A Job Block for triggering a Census sync run and waiting for completion.\n\n    Attributes:\n        credentials: Credentials for authenticating with Census.\n        sync_id: The ID of the sync to trigger.\n        force_full_sync: If `True`, a full sync will be triggered.\n        max_wait_seconds: Maximum number of seconds to wait for sync to complete.\n        poll_frequency_seconds: Number of seconds to wait in between checks\n            for run completion.\n\n    Example:\n        Trigger a Census sync and wait for completion as a subflow:\n        ```python\n        from prefect import flow\n        from prefect_census import CensusSync, run_census_sync\n\n        @flow\n        def my_census_flow():\n            census_sync = CensusSync.load(\"BLOCK_NAME\")\n\n            # do some setup\n\n            run_census_sync(census_sync)\n\n            # do some cleanup\n        ```\n    \"\"\"\n\n    credentials: CensusCredentials = Field(\n        default=...,\n        description=\"Credentials for authenticating with Census.\",\n    )\n\n    sync_id: int = Field(\n        default=...,\n        description=\"The ID of the sync to trigger.\",\n    )\n\n    force_full_sync: bool = Field(\n        default=False,\n        description=\"If `True`, a full sync will be triggered.\",\n    )\n\n    max_wait_seconds: int = Field(\n        default=3600,\n        description=\"The maximum number of seconds to wait for the sync to complete.\",\n    )\n\n    poll_frequency_seconds: int = Field(\n        default=5,\n        description=\"Number of seconds to wait between sync status checks.\",\n    )\n\n    _block_type_name = \"Census Sync\"\n    _description = \"Runs a Census sync\"\n    _documentation_url = \"https://prefecthq.github.io/prefect-census/syncs/\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/3oznRx2UFkd2XyqNkEZpzB/4e0967a828aec5e2527cedadf8d24e8a/llmjpn8a0pgu8szjmnyi.webp?h=250\"  # noqa\n\n    @sync_compatible\n    async def trigger(self) -&gt; \"CensusSyncRun\":\n\"\"\"\n        Trigger a Census sync run.\n\n        Returns:\n            A CensusSyncRun instance representing the triggered sync run.\n        \"\"\"\n        self.logger.info(f\"Triggering Census sync run for sync with ID {self.sync_id}\")\n        try:\n            async with self.credentials.get_client() as client:\n                response = await client.trigger_sync_run(\n                    sync_id=self.sync_id, force_full_sync=self.force_full_sync\n                )\n        except HTTPStatusError as e:\n            raise CensusSyncTriggerFailed(extract_user_message(e)) from e\n\n        run_data = response.json()[\"data\"]\n\n        if \"sync_run_id\" in run_data:\n            self.logger.info(\n                f\"Census sync with ID: {self.sync_id} successfully triggered. \"\n                \"You can view the status of this sync run at \"\n                f\"https://app.getcensus.com/sync/{self.sync_id}/sync-history\"\n            )\n\n        run_id = run_data[\"sync_run_id\"]\n        if run_id is None:\n            raise RuntimeError(\"Unable to determine run ID for triggered sync.\")\n\n        return CensusSyncRun(census_sync=self, run_id=run_id)\n</code></pre>"},{"location":"syncs/#prefect_census.syncs.CensusSync-functions","title":"Functions","text":""},{"location":"syncs/#prefect_census.syncs.CensusSync.trigger","title":"<code>trigger</code>  <code>async</code>","text":"<p>Trigger a Census sync run.</p> <p>Returns:</p> Type Description <code>CensusSyncRun</code> <p>A CensusSyncRun instance representing the triggered sync run.</p> Source code in <code>prefect_census/syncs.py</code> <pre><code>@sync_compatible\nasync def trigger(self) -&gt; \"CensusSyncRun\":\n\"\"\"\n    Trigger a Census sync run.\n\n    Returns:\n        A CensusSyncRun instance representing the triggered sync run.\n    \"\"\"\n    self.logger.info(f\"Triggering Census sync run for sync with ID {self.sync_id}\")\n    try:\n        async with self.credentials.get_client() as client:\n            response = await client.trigger_sync_run(\n                sync_id=self.sync_id, force_full_sync=self.force_full_sync\n            )\n    except HTTPStatusError as e:\n        raise CensusSyncTriggerFailed(extract_user_message(e)) from e\n\n    run_data = response.json()[\"data\"]\n\n    if \"sync_run_id\" in run_data:\n        self.logger.info(\n            f\"Census sync with ID: {self.sync_id} successfully triggered. \"\n            \"You can view the status of this sync run at \"\n            f\"https://app.getcensus.com/sync/{self.sync_id}/sync-history\"\n        )\n\n    run_id = run_data[\"sync_run_id\"]\n    if run_id is None:\n        raise RuntimeError(\"Unable to determine run ID for triggered sync.\")\n\n    return CensusSyncRun(census_sync=self, run_id=run_id)\n</code></pre>"},{"location":"syncs/#prefect_census.syncs.CensusSyncResult","title":"<code>CensusSyncResult</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>The results for a Census Sync Run.</p> Source code in <code>prefect_census/syncs.py</code> <pre><code>class CensusSyncResult(BaseModel):\n\"\"\"The results for a Census Sync Run.\"\"\"\n\n    final_status: CensusSyncRunStatus\n    run_data: Dict[str, Any]\n</code></pre>"},{"location":"syncs/#prefect_census.syncs.CensusSyncRun","title":"<code>CensusSyncRun</code>","text":"<p>         Bases: <code>JobRun</code></p> <p>A Job Run representing a Census sync run.</p> <p>Attributes:</p> Name Type Description <code>sync</code> <p>The CensusSync instance that triggered this run.</p> <code>run_id</code> <p>The ID of the Census sync run.</p> <code>run_data</code> <p>The data returned by the Census API for this run.</p> <code>status</code> <p>The status of the Census sync run.</p> Source code in <code>prefect_census/syncs.py</code> <pre><code>class CensusSyncRun(JobRun):\n\"\"\"\n    A Job Run representing a Census sync run.\n\n    Attributes:\n        sync: The CensusSync instance that triggered this run.\n        run_id: The ID of the Census sync run.\n        run_data: The data returned by the Census API for this run.\n        status: The status of the Census sync run.\n    \"\"\"\n\n    def __init__(self, census_sync, run_id) -&gt; None:\n        self.sync = census_sync\n        self.run_id = run_id\n        self.run_data = None\n        self.status = None\n\n    @sync_compatible\n    async def wait_for_completion(self):\n\"\"\"Wait for the Census sync run to complete.\"\"\"\n        seconds_waited_for_run_completion = 0\n        last_status = None\n        while seconds_waited_for_run_completion &lt;= self.sync.max_wait_seconds:\n            try:\n                async with self.sync.credentials.get_client() as client:\n                    response = await client.get_run_info(self.run_id)\n            except HTTPStatusError as e:\n                raise RuntimeError(extract_user_message(e)) from e\n\n            run_data = response.json()[\"data\"]\n            self.status = run_data.get(\"status\")\n\n            if CensusSyncRunStatus.is_terminal_status_code(self.status):\n                self.run_data = run_data\n                if self.status == CensusSyncRunStatus.COMPLETED.value:\n                    self.logger.info(\n                        \"Census sync run with ID %s completed successfully!\",\n                        self.run_id,\n                    )\n                    return\n\n                elif self.status == CensusSyncRunStatus.CANCELLED.value:\n                    raise CensusSyncRunCancelled(\n                        f\"Triggered sync run with ID {self.run_id} was cancelled.\"\n                    )\n                elif self.status == CensusSyncRunStatus.FAILED.value:\n                    raise CensusSyncRunFailed(\n                        f\"Triggered sync run with ID {self.run_id} has failed.\"\n                    )\n                else:\n                    raise RuntimeError(\n                        f\"Sync run with ID: {self.run_id} ended with unexpected \"\n                        f\"status {self.status}\"\n                    )\n            if self.status != last_status:\n                self.logger.info(\n                    \"Census sync run with ID %i has status %s.\",\n                    self.run_id,\n                    CensusSyncRunStatus(self.status).name,\n                )\n                last_status = self.status\n\n            await asyncio.sleep(self.sync.poll_frequency_seconds)\n            seconds_waited_for_run_completion += self.sync.poll_frequency_seconds\n\n        raise CensusSyncRunTimeout(\n            f\"Timeout of {self.sync.max_wait_seconds} seconds exceeded while \"\n            f\"waiting for sync run with ID {self.run_id} to complete.\"\n        )\n\n    @sync_compatible\n    async def fetch_result(self) -&gt; CensusSyncResult:\n\"\"\"Fetch the result of the Census sync run.\n\n        Returns:\n            A CensusSyncResult instance representing the result of the sync run.\n        \"\"\"\n        return CensusSyncResult(\n            final_status=CensusSyncRunStatus(self.status),\n            run_data=self.run_data,\n        )\n</code></pre>"},{"location":"syncs/#prefect_census.syncs.CensusSyncRun-functions","title":"Functions","text":""},{"location":"syncs/#prefect_census.syncs.CensusSyncRun.fetch_result","title":"<code>fetch_result</code>  <code>async</code>","text":"<p>Fetch the result of the Census sync run.</p> <p>Returns:</p> Type Description <code>CensusSyncResult</code> <p>A CensusSyncResult instance representing the result of the sync run.</p> Source code in <code>prefect_census/syncs.py</code> <pre><code>@sync_compatible\nasync def fetch_result(self) -&gt; CensusSyncResult:\n\"\"\"Fetch the result of the Census sync run.\n\n    Returns:\n        A CensusSyncResult instance representing the result of the sync run.\n    \"\"\"\n    return CensusSyncResult(\n        final_status=CensusSyncRunStatus(self.status),\n        run_data=self.run_data,\n    )\n</code></pre>"},{"location":"syncs/#prefect_census.syncs.CensusSyncRun.wait_for_completion","title":"<code>wait_for_completion</code>  <code>async</code>","text":"<p>Wait for the Census sync run to complete.</p> Source code in <code>prefect_census/syncs.py</code> <pre><code>@sync_compatible\nasync def wait_for_completion(self):\n\"\"\"Wait for the Census sync run to complete.\"\"\"\n    seconds_waited_for_run_completion = 0\n    last_status = None\n    while seconds_waited_for_run_completion &lt;= self.sync.max_wait_seconds:\n        try:\n            async with self.sync.credentials.get_client() as client:\n                response = await client.get_run_info(self.run_id)\n        except HTTPStatusError as e:\n            raise RuntimeError(extract_user_message(e)) from e\n\n        run_data = response.json()[\"data\"]\n        self.status = run_data.get(\"status\")\n\n        if CensusSyncRunStatus.is_terminal_status_code(self.status):\n            self.run_data = run_data\n            if self.status == CensusSyncRunStatus.COMPLETED.value:\n                self.logger.info(\n                    \"Census sync run with ID %s completed successfully!\",\n                    self.run_id,\n                )\n                return\n\n            elif self.status == CensusSyncRunStatus.CANCELLED.value:\n                raise CensusSyncRunCancelled(\n                    f\"Triggered sync run with ID {self.run_id} was cancelled.\"\n                )\n            elif self.status == CensusSyncRunStatus.FAILED.value:\n                raise CensusSyncRunFailed(\n                    f\"Triggered sync run with ID {self.run_id} has failed.\"\n                )\n            else:\n                raise RuntimeError(\n                    f\"Sync run with ID: {self.run_id} ended with unexpected \"\n                    f\"status {self.status}\"\n                )\n        if self.status != last_status:\n            self.logger.info(\n                \"Census sync run with ID %i has status %s.\",\n                self.run_id,\n                CensusSyncRunStatus(self.status).name,\n            )\n            last_status = self.status\n\n        await asyncio.sleep(self.sync.poll_frequency_seconds)\n        seconds_waited_for_run_completion += self.sync.poll_frequency_seconds\n\n    raise CensusSyncRunTimeout(\n        f\"Timeout of {self.sync.max_wait_seconds} seconds exceeded while \"\n        f\"waiting for sync run with ID {self.run_id} to complete.\"\n    )\n</code></pre>"},{"location":"syncs/#prefect_census.syncs.CensusSyncTriggerFailed","title":"<code>CensusSyncTriggerFailed</code>","text":"<p>         Bases: <code>RuntimeError</code></p> <p>Used to indicate sync triggered.</p> Source code in <code>prefect_census/syncs.py</code> <pre><code>class CensusSyncTriggerFailed(RuntimeError):\n\"\"\"Used to indicate sync triggered.\"\"\"\n</code></pre>"},{"location":"syncs/#prefect_census.syncs-functions","title":"Functions","text":""},{"location":"syncs/#prefect_census.syncs.trigger_census_sync","title":"<code>trigger_census_sync</code>  <code>async</code>","text":"<p>A task to trigger a Census sync run.</p> <p>Parameters:</p> Name Type Description Default <code>credentials</code> <code>CensusCredentials</code> <p>Credentials for authenticating with Census.</p> required <code>sync_id</code> <code>int</code> <p>The ID of the sync to trigger.</p> required <code>force_full_sync</code> <code>bool</code> <p>If <code>True</code>, a full sync will be triggered.</p> <code>False</code> <p>Returns:</p> Type Description <code>int</code> <p>The ID of the triggered sync run.</p> <p>Examples:</p> <p>Trigger a Census sync run: <pre><code>from prefect import flow\n\nfrom prefect_census import CensusCredentials\nfrom prefect_census.syncs import trigger_census_sync\n\n@flow\ndef trigger_census_sync_flow():\n    credentials = CensusCredentials(api_key=\"my_api_key\")\n    trigger_census_sync(credentials=credentials, sync_id=42)\n\ntrigger_census_sync_flow()\n</code></pre></p> Source code in <code>prefect_census/syncs.py</code> <pre><code>@task(\n    name=\"Trigger Census sync run\",\n    description=\"Triggers a Census sync run for the sync with the given sync_id.\",\n    retries=3,\n    retry_delay_seconds=10,\n)\nasync def trigger_census_sync(\n    credentials: CensusCredentials, sync_id: int, force_full_sync: bool = False\n) -&gt; int:\n\"\"\"\n    A task to trigger a Census sync run.\n\n    Args:\n        credentials: Credentials for authenticating with Census.\n        sync_id: The ID of the sync to trigger.\n        force_full_sync: If `True`, a full sync will be triggered.\n\n    Returns:\n        The ID of the triggered sync run.\n\n    Examples:\n        Trigger a Census sync run:\n        ```python\n        from prefect import flow\n\n        from prefect_census import CensusCredentials\n        from prefect_census.syncs import trigger_census_sync\n\n        @flow\n        def trigger_census_sync_flow():\n            credentials = CensusCredentials(api_key=\"my_api_key\")\n            trigger_census_sync(credentials=credentials, sync_id=42)\n\n        trigger_census_sync_flow()\n        ```\n    \"\"\"\n    logger = get_run_logger()\n\n    logger.info(f\"Triggering Census sync run for sync with ID {sync_id}\")\n    try:\n        async with credentials.get_client() as client:\n            response = await client.trigger_sync_run(\n                sync_id=sync_id, force_full_sync=force_full_sync\n            )\n    except HTTPStatusError as e:\n        raise CensusSyncTriggerFailed(extract_user_message(e)) from e\n\n    run_data = response.json()[\"data\"]\n\n    if \"sync_run_id\" in run_data:\n        logger.info(\n            f\"Census sync run successfully triggered for sync with ID {sync_id}. \"\n            \"You can view the status of this sync run at \"\n            f\"https://app.getcensus.com/sync/{sync_id}/sync-history\"\n        )\n\n    return run_data[\"sync_run_id\"]\n</code></pre>"},{"location":"syncs/#prefect_census.syncs.trigger_census_sync_run_and_wait_for_completion","title":"<code>trigger_census_sync_run_and_wait_for_completion</code>  <code>async</code>","text":"<p>Flow that triggers a sync run and waits for the triggered run to complete.</p> <p>Parameters:</p> Name Type Description Default <code>credentials</code> <code>CensusCredentials</code> <p>Credentials for authenticating with Census.</p> required <code>sync_id</code> <code>int</code> <p>The ID of the sync to trigger.</p> required <code>force_full_sync</code> <code>bool</code> <p>If <code>True</code>, a full sync will be triggered.</p> <code>False</code> <code>max_wait_seconds</code> <code>int</code> <p>Maximum number of seconds to wait for sync to complete</p> <code>900</code> <code>poll_frequency_seconds</code> <code>int</code> <p>Number of seconds to wait in between checks for run completion.</p> <code>10</code> <p>Raises:</p> Type Description <code>CensusSyncRunCancelled</code> <p>The triggered Census sync run was cancelled.</p> <code>CensusSyncRunFailed</code> <p>The triggered Census sync run failed.</p> <code>RuntimeError</code> <p>The triggered Census sync run ended in an unexpected state.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The final run data returned by the Census API as dict with the following shape: <pre><code>{\n    \"id\": 94,\n    \"sync_id\": 52,\n    \"source_record_count\": 1,\n    \"records_processed\": 1,\n    \"records_updated\": 1,\n    \"records_failed\": 0,\n    \"records_invalid\": 0,\n    \"created_at\": \"2021-10-20T02:51:07.546Z\",\n    \"updated_at\": \"2021-10-20T02:52:29.236Z\",\n    \"completed_at\": \"2021-10-20T02:52:29.234Z\",\n    \"scheduled_execution_time\": null,\n    \"error_code\": null,\n    \"error_message\": null,\n    \"error_detail\": null,\n    \"status\": \"completed\",\n    \"canceled\": false,\n    \"full_sync\": true,\n    \"sync_trigger_reason\": {\n        \"ui_tag\": \"Manual\",\n        \"ui_detail\": \"Manually triggered by test@getcensus.com\"\n    }\n}\n</code></pre></p> <p>Examples:</p> <p>Trigger a Census sync using CensusCredentials instance and wait for completion as a standalone flow: <pre><code>import asyncio\n\nfrom prefect_census import CensusCredentials\nfrom prefect_census.syncs import trigger_census_sync_run_and_wait_for_completion\n\nasyncio.run(\n    trigger_census_sync_run_and_wait_for_completion(\n        credentials=CensusCredentials(\n            api_key=\"my_api_key\"\n        ),\n        sync_id=42\n    )\n)\n</code></pre></p> <p>Trigger a Census sync and wait for completion as a subflow: <pre><code>from prefect import flow\n\nfrom prefect_census import CensusCredentials\nfrom prefect_census.syncs import trigger_census_sync_run_and_wait_for_completion\n\n@flow\ndef my_flow():\n    ...\n    creds = CensusCredentials(api_key=\"my_api_key\")\n    run_result = trigger_census_sync_run_and_wait_for_completion(\n        credentials=creds,\n        sync_id=42\n    )\n    ...\n\nmy_flow()\n</code></pre></p> Source code in <code>prefect_census/syncs.py</code> <pre><code>@flow(\n    name=\"Trigger Census sync run and wait for completion\",\n    description=\"Triggers a Census sync run and waits for the\"\n    \"triggered run to complete.\",\n)\nasync def trigger_census_sync_run_and_wait_for_completion(\n    credentials: CensusCredentials,\n    sync_id: int,\n    force_full_sync: bool = False,\n    max_wait_seconds: int = 900,\n    poll_frequency_seconds: int = 10,\n) -&gt; Dict[str, Any]:\n\"\"\"\n    Flow that triggers a sync run and waits for the triggered run to complete.\n\n    Args:\n        credentials: Credentials for authenticating with Census.\n        sync_id: The ID of the sync to trigger.\n        force_full_sync: If `True`, a full sync will be triggered.\n        max_wait_seconds: Maximum number of seconds to wait for sync to complete\n        poll_frequency_seconds: Number of seconds to wait in between checks for run completion.\n\n    Raises:\n        CensusSyncRunCancelled: The triggered Census sync run was cancelled.\n        CensusSyncRunFailed: The triggered Census sync run failed.\n        RuntimeError: The triggered Census sync run ended in an unexpected state.\n\n    Returns:\n        The final run data returned by the Census API as dict with the following shape:\n            ```\n            {\n                \"id\": 94,\n                \"sync_id\": 52,\n                \"source_record_count\": 1,\n                \"records_processed\": 1,\n                \"records_updated\": 1,\n                \"records_failed\": 0,\n                \"records_invalid\": 0,\n                \"created_at\": \"2021-10-20T02:51:07.546Z\",\n                \"updated_at\": \"2021-10-20T02:52:29.236Z\",\n                \"completed_at\": \"2021-10-20T02:52:29.234Z\",\n                \"scheduled_execution_time\": null,\n                \"error_code\": null,\n                \"error_message\": null,\n                \"error_detail\": null,\n                \"status\": \"completed\",\n                \"canceled\": false,\n                \"full_sync\": true,\n                \"sync_trigger_reason\": {\n                    \"ui_tag\": \"Manual\",\n                    \"ui_detail\": \"Manually triggered by test@getcensus.com\"\n                }\n            }\n            ```\n\n    Examples:\n        Trigger a Census sync using CensusCredentials instance and wait\n        for completion as a standalone flow:\n        ```python\n        import asyncio\n\n        from prefect_census import CensusCredentials\n        from prefect_census.syncs import trigger_census_sync_run_and_wait_for_completion\n\n        asyncio.run(\n            trigger_census_sync_run_and_wait_for_completion(\n                credentials=CensusCredentials(\n                    api_key=\"my_api_key\"\n                ),\n                sync_id=42\n            )\n        )\n        ```\n\n        Trigger a Census sync and wait for completion as a subflow:\n        ```python\n        from prefect import flow\n\n        from prefect_census import CensusCredentials\n        from prefect_census.syncs import trigger_census_sync_run_and_wait_for_completion\n\n        @flow\n        def my_flow():\n            ...\n            creds = CensusCredentials(api_key=\"my_api_key\")\n            run_result = trigger_census_sync_run_and_wait_for_completion(\n                credentials=creds,\n                sync_id=42\n            )\n            ...\n\n        my_flow()\n        ```\n    \"\"\"  # noqa\n    logger = get_run_logger()\n\n    triggered_run_data_future = await trigger_census_sync.submit(\n        credentials=credentials, sync_id=sync_id, force_full_sync=force_full_sync\n    )\n\n    run_id = await triggered_run_data_future.result()\n    if run_id is None:\n        raise RuntimeError(\"Unable to determine run ID for triggered sync.\")\n\n    final_run_status, run_data = await wait_census_sync_completion(\n        run_id=run_id,\n        credentials=credentials,\n        max_wait_seconds=max_wait_seconds,\n        poll_frequency_seconds=poll_frequency_seconds,\n    )\n\n    if final_run_status == CensusSyncRunStatus.COMPLETED:\n        logger.info(\n            \"Census sync run with ID %s completed successfully!\",\n            run_id,\n        )\n        return run_data\n\n    elif final_run_status == CensusSyncRunStatus.CANCELLED:\n        raise CensusSyncRunCancelled(\n            f\"Triggered sync run with ID {run_id} was cancelled.\"\n        )\n    elif final_run_status == CensusSyncRunStatus.FAILED:\n        raise CensusSyncRunFailed(f\"Triggered sync run with ID: {run_id} failed.\")\n    else:\n        raise RuntimeError(\n            f\"Triggered sync run with ID: {run_id} ended with unexpected\"\n            f\"status {final_run_status}\"\n        )\n</code></pre>"}]}