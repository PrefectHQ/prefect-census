{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-census Welcome! Prefect integrations for working with Census syncs Census is an Operational Analytics platform that enables you to sync your trusted analytics data from your hub into operational tools that your business teams use on a daily basis. For information on how to get started with Census, refer to the Census docs . Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-census with pip : pip install prefect-census Then, register to view the block on Prefect Cloud: prefect block register -m prefect_census Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI . Get a Census API Key You will need a Census API key to be able to use the integrations in this collection. For directions for how to generate a Census API key, refer to the Getting API Access section of the Census docs. Once you have a Census API key, you can configure a Census Credentials block in the Prefect UI for use with the integrations in this collection. For information about how to configure a block in the Prefect UI, refer to the Prefect docs . Write and run a flow Trigger Census sync run and wait for completion: from prefect import flow from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync_run_and_wait_for_completion @flow def my_flow (): ... creds = CensusCredentials ( api_key = \"my_api_key\" ) run_result = trigger_census_sync_run_and_wait_for_completion ( credentials = creds , sync_id = 42 ) ... my_flow () Get Census sync run info: from prefect import flow from prefect_census import CensusCredentials from prefect_census.runs import get_census_sync_run_info @flow def get_sync_run_info_flow (): credentials = CensusCredentials ( api_key = \"my_api_key\" ) return get_census_sync_run_info ( credentials = credentials , run_id = 42 ) get_sync_run_info_flow () Call custom endpoint: from prefect import flow from prefect_census import CensusCredentials from prefect_census.client import CensusClient @flow def my_flow ( sync_id ): creds_block = CensusCredentials ( api_key = \"my_api_key\" ) client = CensusClient ( api_key = creds_block . api_key . get_secret_value ()) response = client . call_endpoint ( http_method = \"GET\" , path = f \"/syncs/ { sync_id } \" ) return response my_flow ( 42 ) Resources If you encounter any bugs while using prefect-census , feel free to open an issue in the prefect-census repository. If you have any questions or issues while using prefect-census , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-census for updates too! Development If you'd like to install a version of prefect-census for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-census.git cd prefect-census/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-census","text":"","title":"prefect-census"},{"location":"#welcome","text":"Prefect integrations for working with Census syncs Census is an Operational Analytics platform that enables you to sync your trusted analytics data from your hub into operational tools that your business teams use on a daily basis. For information on how to get started with Census, refer to the Census docs .","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-census with pip : pip install prefect-census Then, register to view the block on Prefect Cloud: prefect block register -m prefect_census Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI .","title":"Installation"},{"location":"#get-a-census-api-key","text":"You will need a Census API key to be able to use the integrations in this collection. For directions for how to generate a Census API key, refer to the Getting API Access section of the Census docs. Once you have a Census API key, you can configure a Census Credentials block in the Prefect UI for use with the integrations in this collection. For information about how to configure a block in the Prefect UI, refer to the Prefect docs .","title":"Get a Census API Key"},{"location":"#write-and-run-a-flow","text":"Trigger Census sync run and wait for completion: from prefect import flow from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync_run_and_wait_for_completion @flow def my_flow (): ... creds = CensusCredentials ( api_key = \"my_api_key\" ) run_result = trigger_census_sync_run_and_wait_for_completion ( credentials = creds , sync_id = 42 ) ... my_flow () Get Census sync run info: from prefect import flow from prefect_census import CensusCredentials from prefect_census.runs import get_census_sync_run_info @flow def get_sync_run_info_flow (): credentials = CensusCredentials ( api_key = \"my_api_key\" ) return get_census_sync_run_info ( credentials = credentials , run_id = 42 ) get_sync_run_info_flow () Call custom endpoint: from prefect import flow from prefect_census import CensusCredentials from prefect_census.client import CensusClient @flow def my_flow ( sync_id ): creds_block = CensusCredentials ( api_key = \"my_api_key\" ) client = CensusClient ( api_key = creds_block . api_key . get_secret_value ()) response = client . call_endpoint ( http_method = \"GET\" , path = f \"/syncs/ { sync_id } \" ) return response my_flow ( 42 )","title":"Write and run a flow"},{"location":"#resources","text":"If you encounter any bugs while using prefect-census , feel free to open an issue in the prefect-census repository. If you have any questions or issues while using prefect-census , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-census for updates too!","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-census for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-census.git cd prefect-census/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"client/","text":"prefect_census.client Module containing client for interacting with the Census API Classes CensusClient Client for interacting with the Census API. Attributes: Name Type Description api_key str API key to authenticate with the Census API. Source code in prefect_census/client.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 class CensusClient : \"\"\" Client for interacting with the Census API. Attributes: api_key (str): API key to authenticate with the Census API. \"\"\" def __init__ ( self , api_key : str ): self . _closed = False self . _started = False self . client = AsyncClient ( base_url = \"https://app.getcensus.com/api/v1\" , headers = { \"Authorization\" : f \"Bearer { api_key } \" , \"user-agent\" : f \"prefect- { prefect . __version__ } \" , }, ) @sync_compatible async def call_endpoint ( self , http_method : str , path : str , params : Optional [ Dict [ str , Any ]] = None , json : Optional [ Dict [ str , Any ]] = None , ) -> Response : \"\"\" Call an endpoint in the Census API. Args: http_method: HTTP method to call on the endpoint. path: The partial path for request (e.g. /syncs/42). Will be appended onto the base URL as determined by the client configuration. params: Query parameters to include in the request. json: JSON serializable body to send in the request. Returns: The response from the Census API. Example: ```python from prefect import flow from prefect_census import CensusCredentials from prefect_census.client import CensusClient @flow def my_flow(sync_id): creds_block = CensusCredentials(api_key=\"my_api_key\") client = CensusClient( api_key=creds_block.api_key.get_secret_value() ) response = client.call_endpoint( http_method=\"GET\", path=f\"/syncs/{sync_id}\" ) return response my_flow(42) ``` \"\"\" response = await self . client . request ( method = http_method , url = path , params = params , json = json ) response . raise_for_status () return response @sync_compatible async def get_run_info ( self , run_id : int ) -> Response : \"\"\" Sends a request to the [get sync id info endpoint](https://docs.getcensus.com/basics/api/syncs#get-syncs-id) Args: run_id: The ID of the sync run to get details for. Returns: The response from the Census API. \"\"\" # noqa return await self . call_endpoint ( http_method = \"GET\" , path = f \"/sync_runs/ { run_id } \" , ) @sync_compatible async def trigger_sync_run ( self , sync_id : int , force_full_sync : bool = False ) -> Response : \"\"\" Sends a request to the [trigger sync run endpoint](https://docs.getcensus.com/basics/api/sync-runs) to initiate a sync run. Args: sync_id: The ID of the sync to trigger. force_full_sync: If the sync should perform a full sync. Returns: The response from the Census API. \"\"\" # noqa return await self . call_endpoint ( http_method = \"POST\" , path = f \"/syncs/ { sync_id } /trigger\" , params = { \"force_full_sync\" : force_full_sync }, ) async def __aenter__ ( self ): \"\"\"Async context manager entry method.\"\"\" if self . _closed : raise RuntimeError ( \"The client cannot be started again after it has been closed.\" ) if self . _started : raise RuntimeError ( \"The client cannot be started more than once.\" ) self . _started = True return self async def __aexit__ ( self , * exc ): \"\"\"Async context manager exit method.\"\"\" self . _closed = True await self . client . __aexit__ () Functions __aenter__ async Async context manager entry method. Source code in prefect_census/client.py 116 117 118 119 120 121 122 123 124 125 126 async def __aenter__ ( self ): \"\"\"Async context manager entry method.\"\"\" if self . _closed : raise RuntimeError ( \"The client cannot be started again after it has been closed.\" ) if self . _started : raise RuntimeError ( \"The client cannot be started more than once.\" ) self . _started = True return self __aexit__ async Async context manager exit method. Source code in prefect_census/client.py 128 129 130 131 async def __aexit__ ( self , * exc ): \"\"\"Async context manager exit method.\"\"\" self . _closed = True await self . client . __aexit__ () call_endpoint async Call an endpoint in the Census API. Parameters: Name Type Description Default http_method str HTTP method to call on the endpoint. required path str The partial path for request (e.g. /syncs/42). Will be appended onto the base URL as determined by the client configuration. required params Optional [ Dict [ str , Any ]] Query parameters to include in the request. None json Optional [ Dict [ str , Any ]] JSON serializable body to send in the request. None Returns: Type Description Response The response from the Census API. Example from prefect import flow from prefect_census import CensusCredentials from prefect_census.client import CensusClient @flow def my_flow ( sync_id ): creds_block = CensusCredentials ( api_key = \"my_api_key\" ) client = CensusClient ( api_key = creds_block . api_key . get_secret_value () ) response = client . call_endpoint ( http_method = \"GET\" , path = f \"/syncs/ { sync_id } \" ) return response my_flow ( 42 ) Source code in prefect_census/client.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 @sync_compatible async def call_endpoint ( self , http_method : str , path : str , params : Optional [ Dict [ str , Any ]] = None , json : Optional [ Dict [ str , Any ]] = None , ) -> Response : \"\"\" Call an endpoint in the Census API. Args: http_method: HTTP method to call on the endpoint. path: The partial path for request (e.g. /syncs/42). Will be appended onto the base URL as determined by the client configuration. params: Query parameters to include in the request. json: JSON serializable body to send in the request. Returns: The response from the Census API. Example: ```python from prefect import flow from prefect_census import CensusCredentials from prefect_census.client import CensusClient @flow def my_flow(sync_id): creds_block = CensusCredentials(api_key=\"my_api_key\") client = CensusClient( api_key=creds_block.api_key.get_secret_value() ) response = client.call_endpoint( http_method=\"GET\", path=f\"/syncs/{sync_id}\" ) return response my_flow(42) ``` \"\"\" response = await self . client . request ( method = http_method , url = path , params = params , json = json ) response . raise_for_status () return response get_run_info async Sends a request to the get sync id info endpoint Parameters: Name Type Description Default run_id int The ID of the sync run to get details for. required Returns: Type Description Response The response from the Census API. Source code in prefect_census/client.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 @sync_compatible async def get_run_info ( self , run_id : int ) -> Response : \"\"\" Sends a request to the [get sync id info endpoint](https://docs.getcensus.com/basics/api/syncs#get-syncs-id) Args: run_id: The ID of the sync run to get details for. Returns: The response from the Census API. \"\"\" # noqa return await self . call_endpoint ( http_method = \"GET\" , path = f \"/sync_runs/ { run_id } \" , ) trigger_sync_run async Sends a request to the trigger sync run endpoint to initiate a sync run. Parameters: Name Type Description Default sync_id int The ID of the sync to trigger. required force_full_sync bool If the sync should perform a full sync. False Returns: Type Description Response The response from the Census API. Source code in prefect_census/client.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 @sync_compatible async def trigger_sync_run ( self , sync_id : int , force_full_sync : bool = False ) -> Response : \"\"\" Sends a request to the [trigger sync run endpoint](https://docs.getcensus.com/basics/api/sync-runs) to initiate a sync run. Args: sync_id: The ID of the sync to trigger. force_full_sync: If the sync should perform a full sync. Returns: The response from the Census API. \"\"\" # noqa return await self . call_endpoint ( http_method = \"POST\" , path = f \"/syncs/ { sync_id } /trigger\" , params = { \"force_full_sync\" : force_full_sync }, )","title":"Client"},{"location":"client/#prefect_census.client","text":"Module containing client for interacting with the Census API","title":"client"},{"location":"client/#prefect_census.client-classes","text":"","title":"Classes"},{"location":"client/#prefect_census.client.CensusClient","text":"Client for interacting with the Census API. Attributes: Name Type Description api_key str API key to authenticate with the Census API. Source code in prefect_census/client.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 class CensusClient : \"\"\" Client for interacting with the Census API. Attributes: api_key (str): API key to authenticate with the Census API. \"\"\" def __init__ ( self , api_key : str ): self . _closed = False self . _started = False self . client = AsyncClient ( base_url = \"https://app.getcensus.com/api/v1\" , headers = { \"Authorization\" : f \"Bearer { api_key } \" , \"user-agent\" : f \"prefect- { prefect . __version__ } \" , }, ) @sync_compatible async def call_endpoint ( self , http_method : str , path : str , params : Optional [ Dict [ str , Any ]] = None , json : Optional [ Dict [ str , Any ]] = None , ) -> Response : \"\"\" Call an endpoint in the Census API. Args: http_method: HTTP method to call on the endpoint. path: The partial path for request (e.g. /syncs/42). Will be appended onto the base URL as determined by the client configuration. params: Query parameters to include in the request. json: JSON serializable body to send in the request. Returns: The response from the Census API. Example: ```python from prefect import flow from prefect_census import CensusCredentials from prefect_census.client import CensusClient @flow def my_flow(sync_id): creds_block = CensusCredentials(api_key=\"my_api_key\") client = CensusClient( api_key=creds_block.api_key.get_secret_value() ) response = client.call_endpoint( http_method=\"GET\", path=f\"/syncs/{sync_id}\" ) return response my_flow(42) ``` \"\"\" response = await self . client . request ( method = http_method , url = path , params = params , json = json ) response . raise_for_status () return response @sync_compatible async def get_run_info ( self , run_id : int ) -> Response : \"\"\" Sends a request to the [get sync id info endpoint](https://docs.getcensus.com/basics/api/syncs#get-syncs-id) Args: run_id: The ID of the sync run to get details for. Returns: The response from the Census API. \"\"\" # noqa return await self . call_endpoint ( http_method = \"GET\" , path = f \"/sync_runs/ { run_id } \" , ) @sync_compatible async def trigger_sync_run ( self , sync_id : int , force_full_sync : bool = False ) -> Response : \"\"\" Sends a request to the [trigger sync run endpoint](https://docs.getcensus.com/basics/api/sync-runs) to initiate a sync run. Args: sync_id: The ID of the sync to trigger. force_full_sync: If the sync should perform a full sync. Returns: The response from the Census API. \"\"\" # noqa return await self . call_endpoint ( http_method = \"POST\" , path = f \"/syncs/ { sync_id } /trigger\" , params = { \"force_full_sync\" : force_full_sync }, ) async def __aenter__ ( self ): \"\"\"Async context manager entry method.\"\"\" if self . _closed : raise RuntimeError ( \"The client cannot be started again after it has been closed.\" ) if self . _started : raise RuntimeError ( \"The client cannot be started more than once.\" ) self . _started = True return self async def __aexit__ ( self , * exc ): \"\"\"Async context manager exit method.\"\"\" self . _closed = True await self . client . __aexit__ ()","title":"CensusClient"},{"location":"client/#prefect_census.client.CensusClient-functions","text":"","title":"Functions"},{"location":"client/#prefect_census.client.CensusClient.__aenter__","text":"Async context manager entry method. Source code in prefect_census/client.py 116 117 118 119 120 121 122 123 124 125 126 async def __aenter__ ( self ): \"\"\"Async context manager entry method.\"\"\" if self . _closed : raise RuntimeError ( \"The client cannot be started again after it has been closed.\" ) if self . _started : raise RuntimeError ( \"The client cannot be started more than once.\" ) self . _started = True return self","title":"__aenter__()"},{"location":"client/#prefect_census.client.CensusClient.__aexit__","text":"Async context manager exit method. Source code in prefect_census/client.py 128 129 130 131 async def __aexit__ ( self , * exc ): \"\"\"Async context manager exit method.\"\"\" self . _closed = True await self . client . __aexit__ ()","title":"__aexit__()"},{"location":"client/#prefect_census.client.CensusClient.call_endpoint","text":"Call an endpoint in the Census API. Parameters: Name Type Description Default http_method str HTTP method to call on the endpoint. required path str The partial path for request (e.g. /syncs/42). Will be appended onto the base URL as determined by the client configuration. required params Optional [ Dict [ str , Any ]] Query parameters to include in the request. None json Optional [ Dict [ str , Any ]] JSON serializable body to send in the request. None Returns: Type Description Response The response from the Census API. Example from prefect import flow from prefect_census import CensusCredentials from prefect_census.client import CensusClient @flow def my_flow ( sync_id ): creds_block = CensusCredentials ( api_key = \"my_api_key\" ) client = CensusClient ( api_key = creds_block . api_key . get_secret_value () ) response = client . call_endpoint ( http_method = \"GET\" , path = f \"/syncs/ { sync_id } \" ) return response my_flow ( 42 ) Source code in prefect_census/client.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 @sync_compatible async def call_endpoint ( self , http_method : str , path : str , params : Optional [ Dict [ str , Any ]] = None , json : Optional [ Dict [ str , Any ]] = None , ) -> Response : \"\"\" Call an endpoint in the Census API. Args: http_method: HTTP method to call on the endpoint. path: The partial path for request (e.g. /syncs/42). Will be appended onto the base URL as determined by the client configuration. params: Query parameters to include in the request. json: JSON serializable body to send in the request. Returns: The response from the Census API. Example: ```python from prefect import flow from prefect_census import CensusCredentials from prefect_census.client import CensusClient @flow def my_flow(sync_id): creds_block = CensusCredentials(api_key=\"my_api_key\") client = CensusClient( api_key=creds_block.api_key.get_secret_value() ) response = client.call_endpoint( http_method=\"GET\", path=f\"/syncs/{sync_id}\" ) return response my_flow(42) ``` \"\"\" response = await self . client . request ( method = http_method , url = path , params = params , json = json ) response . raise_for_status () return response","title":"call_endpoint()"},{"location":"client/#prefect_census.client.CensusClient.get_run_info","text":"Sends a request to the get sync id info endpoint Parameters: Name Type Description Default run_id int The ID of the sync run to get details for. required Returns: Type Description Response The response from the Census API. Source code in prefect_census/client.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 @sync_compatible async def get_run_info ( self , run_id : int ) -> Response : \"\"\" Sends a request to the [get sync id info endpoint](https://docs.getcensus.com/basics/api/syncs#get-syncs-id) Args: run_id: The ID of the sync run to get details for. Returns: The response from the Census API. \"\"\" # noqa return await self . call_endpoint ( http_method = \"GET\" , path = f \"/sync_runs/ { run_id } \" , )","title":"get_run_info()"},{"location":"client/#prefect_census.client.CensusClient.trigger_sync_run","text":"Sends a request to the trigger sync run endpoint to initiate a sync run. Parameters: Name Type Description Default sync_id int The ID of the sync to trigger. required force_full_sync bool If the sync should perform a full sync. False Returns: Type Description Response The response from the Census API. Source code in prefect_census/client.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 @sync_compatible async def trigger_sync_run ( self , sync_id : int , force_full_sync : bool = False ) -> Response : \"\"\" Sends a request to the [trigger sync run endpoint](https://docs.getcensus.com/basics/api/sync-runs) to initiate a sync run. Args: sync_id: The ID of the sync to trigger. force_full_sync: If the sync should perform a full sync. Returns: The response from the Census API. \"\"\" # noqa return await self . call_endpoint ( http_method = \"POST\" , path = f \"/syncs/ { sync_id } /trigger\" , params = { \"force_full_sync\" : force_full_sync }, )","title":"trigger_sync_run()"},{"location":"credentials/","text":"prefect_census.credentials Module containing credentials for interacting with Census. Classes CensusCredentials Bases: Block Credentials block for credential use across Census tasks and flows. Attributes: Name Type Description api_key SecretStr API key to authenticate with the Census API. Refer to the Census authentication docs for retrieving the API key. Examples: Load stored Census credentials: from prefect_census import CensusCredentials census_creds = CensusCredentials . load ( \"BLOCK_NAME\" ) Use CensusCredentials instance to trigger a sync run: import asyncio from prefect import flow from prefect_census import CensusCredentials credentials = CensusCredentials ( api_key = \"my_api_key\" ) @flow async def trigger_sync_run_flow (): async with credentials . get_client () as client : await client . trigger_sync_run ( sync_id = 42 ) asyncio . run ( trigger_sync_run_flow ()) Load saved Census credentials within a flow: from prefect import flow from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync @flow def trigger_census_sync_run_flow (): credentials = CensusCredentials . load ( \"my-census-credentials\" ) trigger_census_sync ( credentials = credentials , sync_id = 42 ) trigger_census_sync_run_flow () Source code in prefect_census/credentials.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 class CensusCredentials ( Block ): \"\"\" Credentials block for credential use across Census tasks and flows. Attributes: api_key: API key to authenticate with the Census API. Refer to the [Census authentication docs]( https://docs.getcensus.com/basics/api#getting-api-access) for retrieving the API key. Examples: Load stored Census credentials: ```python from prefect_census import CensusCredentials census_creds = CensusCredentials.load(\"BLOCK_NAME\") ``` Use CensusCredentials instance to trigger a sync run: ```python import asyncio from prefect import flow from prefect_census import CensusCredentials credentials = CensusCredentials(api_key=\"my_api_key\") @flow async def trigger_sync_run_flow(): async with credentials.get_client() as client: await client.trigger_sync_run(sync_id=42) asyncio.run(trigger_sync_run_flow()) ``` Load saved Census credentials within a flow: ```python from prefect import flow from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync @flow def trigger_census_sync_run_flow(): credentials = CensusCredentials.load(\"my-census-credentials\") trigger_census_sync(credentials=credentials, sync_id=42) trigger_census_sync_run_flow() ``` \"\"\" _block_type_name = \"Census Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/3oznRx2UFkd2XyqNkEZpzB/4e0967a828aec5e2527cedadf8d24e8a/llmjpn8a0pgu8szjmnyi.webp?h=250\" # noqa api_key : SecretStr = Field ( ... , title = \"API Key\" , description = \"API key to authenticate with the Census API.\" ) def get_client ( self ) -> CensusClient : \"\"\" Provides an authenticated client for working with the Census API. Returns: A authenticated Census API client \"\"\" return CensusClient ( api_key = self . api_key . get_secret_value ()) Functions get_client Provides an authenticated client for working with the Census API. Returns: Type Description CensusClient A authenticated Census API client Source code in prefect_census/credentials.py 65 66 67 68 69 70 71 72 def get_client ( self ) -> CensusClient : \"\"\" Provides an authenticated client for working with the Census API. Returns: A authenticated Census API client \"\"\" return CensusClient ( api_key = self . api_key . get_secret_value ())","title":"Credentials"},{"location":"credentials/#prefect_census.credentials","text":"Module containing credentials for interacting with Census.","title":"credentials"},{"location":"credentials/#prefect_census.credentials-classes","text":"","title":"Classes"},{"location":"credentials/#prefect_census.credentials.CensusCredentials","text":"Bases: Block Credentials block for credential use across Census tasks and flows. Attributes: Name Type Description api_key SecretStr API key to authenticate with the Census API. Refer to the Census authentication docs for retrieving the API key. Examples: Load stored Census credentials: from prefect_census import CensusCredentials census_creds = CensusCredentials . load ( \"BLOCK_NAME\" ) Use CensusCredentials instance to trigger a sync run: import asyncio from prefect import flow from prefect_census import CensusCredentials credentials = CensusCredentials ( api_key = \"my_api_key\" ) @flow async def trigger_sync_run_flow (): async with credentials . get_client () as client : await client . trigger_sync_run ( sync_id = 42 ) asyncio . run ( trigger_sync_run_flow ()) Load saved Census credentials within a flow: from prefect import flow from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync @flow def trigger_census_sync_run_flow (): credentials = CensusCredentials . load ( \"my-census-credentials\" ) trigger_census_sync ( credentials = credentials , sync_id = 42 ) trigger_census_sync_run_flow () Source code in prefect_census/credentials.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 class CensusCredentials ( Block ): \"\"\" Credentials block for credential use across Census tasks and flows. Attributes: api_key: API key to authenticate with the Census API. Refer to the [Census authentication docs]( https://docs.getcensus.com/basics/api#getting-api-access) for retrieving the API key. Examples: Load stored Census credentials: ```python from prefect_census import CensusCredentials census_creds = CensusCredentials.load(\"BLOCK_NAME\") ``` Use CensusCredentials instance to trigger a sync run: ```python import asyncio from prefect import flow from prefect_census import CensusCredentials credentials = CensusCredentials(api_key=\"my_api_key\") @flow async def trigger_sync_run_flow(): async with credentials.get_client() as client: await client.trigger_sync_run(sync_id=42) asyncio.run(trigger_sync_run_flow()) ``` Load saved Census credentials within a flow: ```python from prefect import flow from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync @flow def trigger_census_sync_run_flow(): credentials = CensusCredentials.load(\"my-census-credentials\") trigger_census_sync(credentials=credentials, sync_id=42) trigger_census_sync_run_flow() ``` \"\"\" _block_type_name = \"Census Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/3oznRx2UFkd2XyqNkEZpzB/4e0967a828aec5e2527cedadf8d24e8a/llmjpn8a0pgu8szjmnyi.webp?h=250\" # noqa api_key : SecretStr = Field ( ... , title = \"API Key\" , description = \"API key to authenticate with the Census API.\" ) def get_client ( self ) -> CensusClient : \"\"\" Provides an authenticated client for working with the Census API. Returns: A authenticated Census API client \"\"\" return CensusClient ( api_key = self . api_key . get_secret_value ())","title":"CensusCredentials"},{"location":"credentials/#prefect_census.credentials.CensusCredentials-functions","text":"","title":"Functions"},{"location":"credentials/#prefect_census.credentials.CensusCredentials.get_client","text":"Provides an authenticated client for working with the Census API. Returns: Type Description CensusClient A authenticated Census API client Source code in prefect_census/credentials.py 65 66 67 68 69 70 71 72 def get_client ( self ) -> CensusClient : \"\"\" Provides an authenticated client for working with the Census API. Returns: A authenticated Census API client \"\"\" return CensusClient ( api_key = self . api_key . get_secret_value ())","title":"get_client()"},{"location":"runs/","text":"prefect_census.runs Module containing tasks and flows for interacting with Census sync runs Classes CensusGetSyncRunInfoFailed Bases: RuntimeError Used to idicate retrieve sync run info. Source code in prefect_census/runs.py 27 28 class CensusGetSyncRunInfoFailed ( RuntimeError ): \"\"\"Used to idicate retrieve sync run info.\"\"\" CensusSyncRunCancelled Bases: Exception Raised when a triggered sync run is cancelled Source code in prefect_census/runs.py 31 32 class CensusSyncRunCancelled ( Exception ): \"\"\"Raised when a triggered sync run is cancelled\"\"\" CensusSyncRunFailed Bases: RuntimeError Raised when unable to retrieve Census sync run Source code in prefect_census/runs.py 14 15 16 17 class CensusSyncRunFailed ( RuntimeError ): \"\"\"Raised when unable to retrieve Census sync run\"\"\" pass CensusSyncRunStatus Bases: Enum Census sync statuses. Source code in prefect_census/runs.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class CensusSyncRunStatus ( Enum ): \"\"\"Census sync statuses.\"\"\" CANCELLED = \"cancelled\" WORKING = \"working\" FAILED = \"failed\" COMPLETED = \"completed\" @classmethod def is_terminal_status_code ( cls , status_code : str ) -> bool : \"\"\" Returns True if a status code is terminal for a sync run. Returns False otherwise. \"\"\" return status_code in [ cls . CANCELLED . value , cls . FAILED . value , cls . COMPLETED . value , ] Functions is_terminal_status_code classmethod Returns True if a status code is terminal for a sync run. Returns False otherwise. Source code in prefect_census/runs.py 43 44 45 46 47 48 49 50 51 52 53 @classmethod def is_terminal_status_code ( cls , status_code : str ) -> bool : \"\"\" Returns True if a status code is terminal for a sync run. Returns False otherwise. \"\"\" return status_code in [ cls . CANCELLED . value , cls . FAILED . value , cls . COMPLETED . value , ] CensusSyncRunTimeout Bases: RuntimeError Raised when a triggered job run does not complete in the configured max wait seconds Source code in prefect_census/runs.py 20 21 22 23 24 class CensusSyncRunTimeout ( RuntimeError ): \"\"\" Raised when a triggered job run does not complete in the configured max wait seconds \"\"\" Functions get_census_sync_run_info async A task to retrieve information a Census sync run. Parameters: Name Type Description Default credentials CensusCredentials Credentials for authenticating with Census. required run_id int The ID of the run of the sync to trigger. required Returns: Type Description Dict [ str , Any ] The run data returned by the Census API as dict with the following shape: { \"id\": 94, \"sync_id\": 52, \"source_record_count\": 1, \"records_processed\": 1, \"records_updated\": 1, \"records_failed\": 0, \"records_invalid\": 0, \"created_at\": \"2021-10-20T02:51:07.546Z\", \"updated_at\": \"2021-10-20T02:52:29.236Z\", \"completed_at\": \"2021-10-20T02:52:29.234Z\", \"scheduled_execution_time\": null, \"error_code\": null, \"error_message\": null, \"error_detail\": null, \"status\": \"completed\", \"canceled\": false, \"full_sync\": true, \"sync_trigger_reason\": { \"ui_tag\": \"Manual\", \"ui_detail\": \"Manually triggered by test@getcensus.com\" } } Example Get Census sync run info: from prefect import flow from prefect_census import CensusCredentials from prefect_census.runs import get_census_sync_run_info @flow def get_sync_run_info_flow (): credentials = CensusCredentials ( api_key = \"my_api_key\" ) return get_census_sync_run_info ( credentials = credentials , run_id = 42 ) get_sync_run_info_flow () Source code in prefect_census/runs.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 @task ( name = \"Get Census sync run details\" , description = ( \"Retrieves details of a Census sync run\" \"for the sync with the given sync_id.\" ), retries = 3 , retry_delay_seconds = 10 , ) async def get_census_sync_run_info ( credentials : CensusCredentials , run_id : int ) -> Dict [ str , Any ]: \"\"\" A task to retrieve information a Census sync run. Args: credentials: Credentials for authenticating with Census. run_id: The ID of the run of the sync to trigger. Returns: The run data returned by the Census API as dict with the following shape: ``` { \"id\": 94, \"sync_id\": 52, \"source_record_count\": 1, \"records_processed\": 1, \"records_updated\": 1, \"records_failed\": 0, \"records_invalid\": 0, \"created_at\": \"2021-10-20T02:51:07.546Z\", \"updated_at\": \"2021-10-20T02:52:29.236Z\", \"completed_at\": \"2021-10-20T02:52:29.234Z\", \"scheduled_execution_time\": null, \"error_code\": null, \"error_message\": null, \"error_detail\": null, \"status\": \"completed\", \"canceled\": false, \"full_sync\": true, \"sync_trigger_reason\": { \"ui_tag\": \"Manual\", \"ui_detail\": \"Manually triggered by test@getcensus.com\" } } ``` Example: Get Census sync run info: ```python from prefect import flow from prefect_census import CensusCredentials from prefect_census.runs import get_census_sync_run_info @flow def get_sync_run_info_flow(): credentials = CensusCredentials(api_key=\"my_api_key\") return get_census_sync_run_info( credentials=credentials, run_id=42 ) get_sync_run_info_flow() ``` \"\"\" # noqa try : async with credentials . get_client () as client : response = await client . get_run_info ( run_id ) except HTTPStatusError as e : raise CensusGetSyncRunInfoFailed ( extract_user_message ( e )) from e return response . json ()[ \"data\" ] wait_census_sync_completion async Wait for the given Census sync run to finish running. Parameters: Name Type Description Default run_id int The ID of the sync run to wait for. required credentials CensusCredentials Credentials for authenticating with Census. required max_wait_seconds int Maximum number of seconds to wait for sync to complete. 60 poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 5 Raises: Type Description CensusSyncRunTimeout When the elapsed wait time exceeds max_wait_seconds . Returns: Name Type Description run_status CensusSyncRunStatus An enum representing the final Census sync run status. run_data Dict [ str , Any ] A dictionary containing information about the run after completion in the following shape: { \"id\": 94, \"sync_id\": 52, \"source_record_count\": 1, \"records_processed\": 1, \"records_updated\": 1, \"records_failed\": 0, \"records_invalid\": 0, \"created_at\": \"2021-10-20T02:51:07.546Z\", \"updated_at\": \"2021-10-20T02:52:29.236Z\", \"completed_at\": \"2021-10-20T02:52:29.234Z\", \"scheduled_execution_time\": null, \"error_code\": null, \"error_message\": null, \"error_detail\": null, \"status\": \"completed\", \"canceled\": false, \"full_sync\": true, \"sync_trigger_reason\": { \"ui_tag\": \"Manual\", \"ui_detail\": \"Manually triggered by test@getcensus.com\" } } Source code in prefect_census/runs.py 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 @flow ( name = \"Wait for Census sync run\" , description = \"Waits for the Census sync run to finish running.\" , ) async def wait_census_sync_completion ( run_id : int , credentials : CensusCredentials , max_wait_seconds : int = 60 , poll_frequency_seconds : int = 5 , ) -> Tuple [ CensusSyncRunStatus , Dict [ str , Any ]]: \"\"\" Wait for the given Census sync run to finish running. Args: run_id: The ID of the sync run to wait for. credentials: Credentials for authenticating with Census. max_wait_seconds: Maximum number of seconds to wait for sync to complete. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Raises: CensusSyncRunTimeout: When the elapsed wait time exceeds `max_wait_seconds`. Returns: run_status: An enum representing the final Census sync run status. run_data: A dictionary containing information about the run after completion in the following shape: ``` { \"id\": 94, \"sync_id\": 52, \"source_record_count\": 1, \"records_processed\": 1, \"records_updated\": 1, \"records_failed\": 0, \"records_invalid\": 0, \"created_at\": \"2021-10-20T02:51:07.546Z\", \"updated_at\": \"2021-10-20T02:52:29.236Z\", \"completed_at\": \"2021-10-20T02:52:29.234Z\", \"scheduled_execution_time\": null, \"error_code\": null, \"error_message\": null, \"error_detail\": null, \"status\": \"completed\", \"canceled\": false, \"full_sync\": true, \"sync_trigger_reason\": { \"ui_tag\": \"Manual\", \"ui_detail\": \"Manually triggered by test@getcensus.com\" } } ``` \"\"\" logger = get_run_logger () seconds_waited_for_run_completion = 0 wait_for = [] while seconds_waited_for_run_completion <= max_wait_seconds : run_data_future = await get_census_sync_run_info . submit ( credentials = credentials , run_id = run_id , wait_for = wait_for , ) run_data = await run_data_future . result () run_status = run_data . get ( \"status\" ) if CensusSyncRunStatus . is_terminal_status_code ( run_status ): return CensusSyncRunStatus ( run_status ), run_data wait_for = [ run_data_future ] logger . info ( \"Census sync run with ID %i has status %s . Waiting for %i seconds.\" , run_id , CensusSyncRunStatus ( run_status ) . name , poll_frequency_seconds , ) await asyncio . sleep ( poll_frequency_seconds ) seconds_waited_for_run_completion += poll_frequency_seconds raise CensusSyncRunTimeout ( f \"Max wait time of { max_wait_seconds } seconds exceeded while waiting \" f \"for sync run with ID { run_id } \" )","title":"Runs"},{"location":"runs/#prefect_census.runs","text":"Module containing tasks and flows for interacting with Census sync runs","title":"runs"},{"location":"runs/#prefect_census.runs-classes","text":"","title":"Classes"},{"location":"runs/#prefect_census.runs.CensusGetSyncRunInfoFailed","text":"Bases: RuntimeError Used to idicate retrieve sync run info. Source code in prefect_census/runs.py 27 28 class CensusGetSyncRunInfoFailed ( RuntimeError ): \"\"\"Used to idicate retrieve sync run info.\"\"\"","title":"CensusGetSyncRunInfoFailed"},{"location":"runs/#prefect_census.runs.CensusSyncRunCancelled","text":"Bases: Exception Raised when a triggered sync run is cancelled Source code in prefect_census/runs.py 31 32 class CensusSyncRunCancelled ( Exception ): \"\"\"Raised when a triggered sync run is cancelled\"\"\"","title":"CensusSyncRunCancelled"},{"location":"runs/#prefect_census.runs.CensusSyncRunFailed","text":"Bases: RuntimeError Raised when unable to retrieve Census sync run Source code in prefect_census/runs.py 14 15 16 17 class CensusSyncRunFailed ( RuntimeError ): \"\"\"Raised when unable to retrieve Census sync run\"\"\" pass","title":"CensusSyncRunFailed"},{"location":"runs/#prefect_census.runs.CensusSyncRunStatus","text":"Bases: Enum Census sync statuses. Source code in prefect_census/runs.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class CensusSyncRunStatus ( Enum ): \"\"\"Census sync statuses.\"\"\" CANCELLED = \"cancelled\" WORKING = \"working\" FAILED = \"failed\" COMPLETED = \"completed\" @classmethod def is_terminal_status_code ( cls , status_code : str ) -> bool : \"\"\" Returns True if a status code is terminal for a sync run. Returns False otherwise. \"\"\" return status_code in [ cls . CANCELLED . value , cls . FAILED . value , cls . COMPLETED . value , ]","title":"CensusSyncRunStatus"},{"location":"runs/#prefect_census.runs.CensusSyncRunStatus-functions","text":"","title":"Functions"},{"location":"runs/#prefect_census.runs.CensusSyncRunStatus.is_terminal_status_code","text":"Returns True if a status code is terminal for a sync run. Returns False otherwise. Source code in prefect_census/runs.py 43 44 45 46 47 48 49 50 51 52 53 @classmethod def is_terminal_status_code ( cls , status_code : str ) -> bool : \"\"\" Returns True if a status code is terminal for a sync run. Returns False otherwise. \"\"\" return status_code in [ cls . CANCELLED . value , cls . FAILED . value , cls . COMPLETED . value , ]","title":"is_terminal_status_code()"},{"location":"runs/#prefect_census.runs.CensusSyncRunTimeout","text":"Bases: RuntimeError Raised when a triggered job run does not complete in the configured max wait seconds Source code in prefect_census/runs.py 20 21 22 23 24 class CensusSyncRunTimeout ( RuntimeError ): \"\"\" Raised when a triggered job run does not complete in the configured max wait seconds \"\"\"","title":"CensusSyncRunTimeout"},{"location":"runs/#prefect_census.runs-functions","text":"","title":"Functions"},{"location":"runs/#prefect_census.runs.get_census_sync_run_info","text":"A task to retrieve information a Census sync run. Parameters: Name Type Description Default credentials CensusCredentials Credentials for authenticating with Census. required run_id int The ID of the run of the sync to trigger. required Returns: Type Description Dict [ str , Any ] The run data returned by the Census API as dict with the following shape: { \"id\": 94, \"sync_id\": 52, \"source_record_count\": 1, \"records_processed\": 1, \"records_updated\": 1, \"records_failed\": 0, \"records_invalid\": 0, \"created_at\": \"2021-10-20T02:51:07.546Z\", \"updated_at\": \"2021-10-20T02:52:29.236Z\", \"completed_at\": \"2021-10-20T02:52:29.234Z\", \"scheduled_execution_time\": null, \"error_code\": null, \"error_message\": null, \"error_detail\": null, \"status\": \"completed\", \"canceled\": false, \"full_sync\": true, \"sync_trigger_reason\": { \"ui_tag\": \"Manual\", \"ui_detail\": \"Manually triggered by test@getcensus.com\" } } Example Get Census sync run info: from prefect import flow from prefect_census import CensusCredentials from prefect_census.runs import get_census_sync_run_info @flow def get_sync_run_info_flow (): credentials = CensusCredentials ( api_key = \"my_api_key\" ) return get_census_sync_run_info ( credentials = credentials , run_id = 42 ) get_sync_run_info_flow () Source code in prefect_census/runs.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 @task ( name = \"Get Census sync run details\" , description = ( \"Retrieves details of a Census sync run\" \"for the sync with the given sync_id.\" ), retries = 3 , retry_delay_seconds = 10 , ) async def get_census_sync_run_info ( credentials : CensusCredentials , run_id : int ) -> Dict [ str , Any ]: \"\"\" A task to retrieve information a Census sync run. Args: credentials: Credentials for authenticating with Census. run_id: The ID of the run of the sync to trigger. Returns: The run data returned by the Census API as dict with the following shape: ``` { \"id\": 94, \"sync_id\": 52, \"source_record_count\": 1, \"records_processed\": 1, \"records_updated\": 1, \"records_failed\": 0, \"records_invalid\": 0, \"created_at\": \"2021-10-20T02:51:07.546Z\", \"updated_at\": \"2021-10-20T02:52:29.236Z\", \"completed_at\": \"2021-10-20T02:52:29.234Z\", \"scheduled_execution_time\": null, \"error_code\": null, \"error_message\": null, \"error_detail\": null, \"status\": \"completed\", \"canceled\": false, \"full_sync\": true, \"sync_trigger_reason\": { \"ui_tag\": \"Manual\", \"ui_detail\": \"Manually triggered by test@getcensus.com\" } } ``` Example: Get Census sync run info: ```python from prefect import flow from prefect_census import CensusCredentials from prefect_census.runs import get_census_sync_run_info @flow def get_sync_run_info_flow(): credentials = CensusCredentials(api_key=\"my_api_key\") return get_census_sync_run_info( credentials=credentials, run_id=42 ) get_sync_run_info_flow() ``` \"\"\" # noqa try : async with credentials . get_client () as client : response = await client . get_run_info ( run_id ) except HTTPStatusError as e : raise CensusGetSyncRunInfoFailed ( extract_user_message ( e )) from e return response . json ()[ \"data\" ]","title":"get_census_sync_run_info()"},{"location":"runs/#prefect_census.runs.wait_census_sync_completion","text":"Wait for the given Census sync run to finish running. Parameters: Name Type Description Default run_id int The ID of the sync run to wait for. required credentials CensusCredentials Credentials for authenticating with Census. required max_wait_seconds int Maximum number of seconds to wait for sync to complete. 60 poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 5 Raises: Type Description CensusSyncRunTimeout When the elapsed wait time exceeds max_wait_seconds . Returns: Name Type Description run_status CensusSyncRunStatus An enum representing the final Census sync run status. run_data Dict [ str , Any ] A dictionary containing information about the run after completion in the following shape: { \"id\": 94, \"sync_id\": 52, \"source_record_count\": 1, \"records_processed\": 1, \"records_updated\": 1, \"records_failed\": 0, \"records_invalid\": 0, \"created_at\": \"2021-10-20T02:51:07.546Z\", \"updated_at\": \"2021-10-20T02:52:29.236Z\", \"completed_at\": \"2021-10-20T02:52:29.234Z\", \"scheduled_execution_time\": null, \"error_code\": null, \"error_message\": null, \"error_detail\": null, \"status\": \"completed\", \"canceled\": false, \"full_sync\": true, \"sync_trigger_reason\": { \"ui_tag\": \"Manual\", \"ui_detail\": \"Manually triggered by test@getcensus.com\" } } Source code in prefect_census/runs.py 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 @flow ( name = \"Wait for Census sync run\" , description = \"Waits for the Census sync run to finish running.\" , ) async def wait_census_sync_completion ( run_id : int , credentials : CensusCredentials , max_wait_seconds : int = 60 , poll_frequency_seconds : int = 5 , ) -> Tuple [ CensusSyncRunStatus , Dict [ str , Any ]]: \"\"\" Wait for the given Census sync run to finish running. Args: run_id: The ID of the sync run to wait for. credentials: Credentials for authenticating with Census. max_wait_seconds: Maximum number of seconds to wait for sync to complete. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Raises: CensusSyncRunTimeout: When the elapsed wait time exceeds `max_wait_seconds`. Returns: run_status: An enum representing the final Census sync run status. run_data: A dictionary containing information about the run after completion in the following shape: ``` { \"id\": 94, \"sync_id\": 52, \"source_record_count\": 1, \"records_processed\": 1, \"records_updated\": 1, \"records_failed\": 0, \"records_invalid\": 0, \"created_at\": \"2021-10-20T02:51:07.546Z\", \"updated_at\": \"2021-10-20T02:52:29.236Z\", \"completed_at\": \"2021-10-20T02:52:29.234Z\", \"scheduled_execution_time\": null, \"error_code\": null, \"error_message\": null, \"error_detail\": null, \"status\": \"completed\", \"canceled\": false, \"full_sync\": true, \"sync_trigger_reason\": { \"ui_tag\": \"Manual\", \"ui_detail\": \"Manually triggered by test@getcensus.com\" } } ``` \"\"\" logger = get_run_logger () seconds_waited_for_run_completion = 0 wait_for = [] while seconds_waited_for_run_completion <= max_wait_seconds : run_data_future = await get_census_sync_run_info . submit ( credentials = credentials , run_id = run_id , wait_for = wait_for , ) run_data = await run_data_future . result () run_status = run_data . get ( \"status\" ) if CensusSyncRunStatus . is_terminal_status_code ( run_status ): return CensusSyncRunStatus ( run_status ), run_data wait_for = [ run_data_future ] logger . info ( \"Census sync run with ID %i has status %s . Waiting for %i seconds.\" , run_id , CensusSyncRunStatus ( run_status ) . name , poll_frequency_seconds , ) await asyncio . sleep ( poll_frequency_seconds ) seconds_waited_for_run_completion += poll_frequency_seconds raise CensusSyncRunTimeout ( f \"Max wait time of { max_wait_seconds } seconds exceeded while waiting \" f \"for sync run with ID { run_id } \" )","title":"wait_census_sync_completion()"},{"location":"syncs/","text":"prefect_census.syncs Module containing tasks and flows for interacting with Census syncs. Classes CensusSyncTriggerFailed Bases: RuntimeError Used to indicate sync triggered. Source code in prefect_census/syncs.py 18 19 class CensusSyncTriggerFailed ( RuntimeError ): \"\"\"Used to indicate sync triggered.\"\"\" Functions trigger_census_sync async A task to trigger a Census sync run. Parameters: Name Type Description Default credentials CensusCredentials Credentials for authenticating with Census. required sync_id int The ID of the sync to trigger. required force_full_sync bool If True , a full sync will be triggered. False Returns: Type Description int The ID of the triggered sync run. Examples: Trigger a Census sync run: from prefect import flow from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync @flow def trigger_census_sync_flow (): credentials = CensusCredentials ( api_key = \"my_api_key\" ) trigger_census_sync ( credentials = credentials , sync_id = 42 ) trigger_census_sync_flow () Source code in prefect_census/syncs.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 @task ( name = \"Trigger Census sync run\" , description = \"Triggers a Census sync run for the sync with the given sync_id.\" , retries = 3 , retry_delay_seconds = 10 , ) async def trigger_census_sync ( credentials : CensusCredentials , sync_id : int , force_full_sync : bool = False ) -> int : \"\"\" A task to trigger a Census sync run. Args: credentials: Credentials for authenticating with Census. sync_id: The ID of the sync to trigger. force_full_sync: If `True`, a full sync will be triggered. Returns: The ID of the triggered sync run. Examples: Trigger a Census sync run: ```python from prefect import flow from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync @flow def trigger_census_sync_flow(): credentials = CensusCredentials(api_key=\"my_api_key\") trigger_census_sync(credentials=credentials, sync_id=42) trigger_census_sync_flow() ``` \"\"\" logger = get_run_logger () logger . info ( f \"Triggering Census sync run for sync with ID { sync_id } \" ) try : async with credentials . get_client () as client : response = await client . trigger_sync_run ( sync_id = sync_id , force_full_sync = force_full_sync ) except HTTPStatusError as e : raise CensusSyncTriggerFailed ( extract_user_message ( e )) from e run_data = response . json ()[ \"data\" ] if \"sync_run_id\" in run_data : logger . info ( f \"Census sync run successfully triggered for sync with ID { id } . \" \"You can view the status of this sync run at \" f \"https://app.getcensus.com/sync/ { id } /sync-history\" ) return run_data [ \"sync_run_id\" ] trigger_census_sync_run_and_wait_for_completion async Flow that triggers a sync run and waits for the triggered run to complete. Parameters: Name Type Description Default credentials CensusCredentials Credentials for authenticating with Census. required sync_id int The ID of the sync to trigger. required force_full_sync bool If True , a full sync will be triggered. False max_wait_seconds int Maximum number of seconds to wait for sync to complete 900 poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 10 Raises: Type Description CensusSyncRunCancelled The triggered Census sync run was cancelled. CensusSyncRunFailed The triggered Census sync run failed. RuntimeError The triggered Census sync run ended in an unexpected state. Returns: Type Description Dict [ str , Any ] The final run data returned by the Census API as dict with the following shape: { \"id\": 94, \"sync_id\": 52, \"source_record_count\": 1, \"records_processed\": 1, \"records_updated\": 1, \"records_failed\": 0, \"records_invalid\": 0, \"created_at\": \"2021-10-20T02:51:07.546Z\", \"updated_at\": \"2021-10-20T02:52:29.236Z\", \"completed_at\": \"2021-10-20T02:52:29.234Z\", \"scheduled_execution_time\": null, \"error_code\": null, \"error_message\": null, \"error_detail\": null, \"status\": \"completed\", \"canceled\": false, \"full_sync\": true, \"sync_trigger_reason\": { \"ui_tag\": \"Manual\", \"ui_detail\": \"Manually triggered by test@getcensus.com\" } } Examples: Trigger a Census sync using CensusCredentials instance and wait for completion as a standalone flow: import asyncio from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync_run_and_wait_for_completion asyncio . run ( trigger_census_sync_run_and_wait_for_completion ( credentials = CensusCredentials ( api_key = \"my_api_key\" ), sync_id = 42 ) ) Trigger a Census sync and wait for completion as a subflow: from prefect import flow from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync_run_and_wait_for_completion @flow def my_flow (): ... creds = CensusCredentials ( api_key = \"my_api_key\" ) run_result = trigger_census_sync_run_and_wait_for_completion ( credentials = creds , sync_id = 42 ) ... my_flow () Source code in prefect_census/syncs.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 @flow ( name = \"Trigger Census sync run and wait for completion\" , description = \"Triggers a Census sync run and waits for the\" \"triggered run to complete.\" , ) async def trigger_census_sync_run_and_wait_for_completion ( credentials : CensusCredentials , sync_id : int , force_full_sync : bool = False , max_wait_seconds : int = 900 , poll_frequency_seconds : int = 10 , ) -> Dict [ str , Any ]: \"\"\" Flow that triggers a sync run and waits for the triggered run to complete. Args: credentials: Credentials for authenticating with Census. sync_id: The ID of the sync to trigger. force_full_sync: If `True`, a full sync will be triggered. max_wait_seconds: Maximum number of seconds to wait for sync to complete poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Raises: CensusSyncRunCancelled: The triggered Census sync run was cancelled. CensusSyncRunFailed: The triggered Census sync run failed. RuntimeError: The triggered Census sync run ended in an unexpected state. Returns: The final run data returned by the Census API as dict with the following shape: ``` { \"id\": 94, \"sync_id\": 52, \"source_record_count\": 1, \"records_processed\": 1, \"records_updated\": 1, \"records_failed\": 0, \"records_invalid\": 0, \"created_at\": \"2021-10-20T02:51:07.546Z\", \"updated_at\": \"2021-10-20T02:52:29.236Z\", \"completed_at\": \"2021-10-20T02:52:29.234Z\", \"scheduled_execution_time\": null, \"error_code\": null, \"error_message\": null, \"error_detail\": null, \"status\": \"completed\", \"canceled\": false, \"full_sync\": true, \"sync_trigger_reason\": { \"ui_tag\": \"Manual\", \"ui_detail\": \"Manually triggered by test@getcensus.com\" } } ``` Examples: Trigger a Census sync using CensusCredentials instance and wait for completion as a standalone flow: ```python import asyncio from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync_run_and_wait_for_completion asyncio.run( trigger_census_sync_run_and_wait_for_completion( credentials=CensusCredentials( api_key=\"my_api_key\" ), sync_id=42 ) ) ``` Trigger a Census sync and wait for completion as a subflow: ```python from prefect import flow from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync_run_and_wait_for_completion @flow def my_flow(): ... creds = CensusCredentials(api_key=\"my_api_key\") run_result = trigger_census_sync_run_and_wait_for_completion( credentials=creds, sync_id=42 ) ... my_flow() ``` \"\"\" # noqa logger = get_run_logger () triggered_run_data_future = await trigger_census_sync . submit ( credentials = credentials , sync_id = sync_id , force_full_sync = force_full_sync ) run_id = await triggered_run_data_future . result () if run_id is None : raise RuntimeError ( \"Unable to determine run ID for triggered sync.\" ) final_run_status , run_data = await wait_census_sync_completion ( run_id = run_id , credentials = credentials , max_wait_seconds = max_wait_seconds , poll_frequency_seconds = poll_frequency_seconds , ) if final_run_status == CensusSyncRunStatus . COMPLETED : logger . info ( \"Census sync run with ID %s completed successfully!\" , run_id , ) return run_data elif final_run_status == CensusSyncRunStatus . CANCELLED : raise CensusSyncRunCancelled ( f \"Triggered sync run with ID { run_id } was cancelled.\" ) elif final_run_status == CensusSyncRunStatus . FAILED : raise CensusSyncRunFailed ( f \"Triggered sync run with ID: { run_id } failed.\" ) else : raise RuntimeError ( f \"Triggered sync run with ID: { run_id } ended with unexpected\" f \"status { final_run_status } \" )","title":"Syncs"},{"location":"syncs/#prefect_census.syncs","text":"Module containing tasks and flows for interacting with Census syncs.","title":"syncs"},{"location":"syncs/#prefect_census.syncs-classes","text":"","title":"Classes"},{"location":"syncs/#prefect_census.syncs.CensusSyncTriggerFailed","text":"Bases: RuntimeError Used to indicate sync triggered. Source code in prefect_census/syncs.py 18 19 class CensusSyncTriggerFailed ( RuntimeError ): \"\"\"Used to indicate sync triggered.\"\"\"","title":"CensusSyncTriggerFailed"},{"location":"syncs/#prefect_census.syncs-functions","text":"","title":"Functions"},{"location":"syncs/#prefect_census.syncs.trigger_census_sync","text":"A task to trigger a Census sync run. Parameters: Name Type Description Default credentials CensusCredentials Credentials for authenticating with Census. required sync_id int The ID of the sync to trigger. required force_full_sync bool If True , a full sync will be triggered. False Returns: Type Description int The ID of the triggered sync run. Examples: Trigger a Census sync run: from prefect import flow from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync @flow def trigger_census_sync_flow (): credentials = CensusCredentials ( api_key = \"my_api_key\" ) trigger_census_sync ( credentials = credentials , sync_id = 42 ) trigger_census_sync_flow () Source code in prefect_census/syncs.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 @task ( name = \"Trigger Census sync run\" , description = \"Triggers a Census sync run for the sync with the given sync_id.\" , retries = 3 , retry_delay_seconds = 10 , ) async def trigger_census_sync ( credentials : CensusCredentials , sync_id : int , force_full_sync : bool = False ) -> int : \"\"\" A task to trigger a Census sync run. Args: credentials: Credentials for authenticating with Census. sync_id: The ID of the sync to trigger. force_full_sync: If `True`, a full sync will be triggered. Returns: The ID of the triggered sync run. Examples: Trigger a Census sync run: ```python from prefect import flow from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync @flow def trigger_census_sync_flow(): credentials = CensusCredentials(api_key=\"my_api_key\") trigger_census_sync(credentials=credentials, sync_id=42) trigger_census_sync_flow() ``` \"\"\" logger = get_run_logger () logger . info ( f \"Triggering Census sync run for sync with ID { sync_id } \" ) try : async with credentials . get_client () as client : response = await client . trigger_sync_run ( sync_id = sync_id , force_full_sync = force_full_sync ) except HTTPStatusError as e : raise CensusSyncTriggerFailed ( extract_user_message ( e )) from e run_data = response . json ()[ \"data\" ] if \"sync_run_id\" in run_data : logger . info ( f \"Census sync run successfully triggered for sync with ID { id } . \" \"You can view the status of this sync run at \" f \"https://app.getcensus.com/sync/ { id } /sync-history\" ) return run_data [ \"sync_run_id\" ]","title":"trigger_census_sync()"},{"location":"syncs/#prefect_census.syncs.trigger_census_sync_run_and_wait_for_completion","text":"Flow that triggers a sync run and waits for the triggered run to complete. Parameters: Name Type Description Default credentials CensusCredentials Credentials for authenticating with Census. required sync_id int The ID of the sync to trigger. required force_full_sync bool If True , a full sync will be triggered. False max_wait_seconds int Maximum number of seconds to wait for sync to complete 900 poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 10 Raises: Type Description CensusSyncRunCancelled The triggered Census sync run was cancelled. CensusSyncRunFailed The triggered Census sync run failed. RuntimeError The triggered Census sync run ended in an unexpected state. Returns: Type Description Dict [ str , Any ] The final run data returned by the Census API as dict with the following shape: { \"id\": 94, \"sync_id\": 52, \"source_record_count\": 1, \"records_processed\": 1, \"records_updated\": 1, \"records_failed\": 0, \"records_invalid\": 0, \"created_at\": \"2021-10-20T02:51:07.546Z\", \"updated_at\": \"2021-10-20T02:52:29.236Z\", \"completed_at\": \"2021-10-20T02:52:29.234Z\", \"scheduled_execution_time\": null, \"error_code\": null, \"error_message\": null, \"error_detail\": null, \"status\": \"completed\", \"canceled\": false, \"full_sync\": true, \"sync_trigger_reason\": { \"ui_tag\": \"Manual\", \"ui_detail\": \"Manually triggered by test@getcensus.com\" } } Examples: Trigger a Census sync using CensusCredentials instance and wait for completion as a standalone flow: import asyncio from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync_run_and_wait_for_completion asyncio . run ( trigger_census_sync_run_and_wait_for_completion ( credentials = CensusCredentials ( api_key = \"my_api_key\" ), sync_id = 42 ) ) Trigger a Census sync and wait for completion as a subflow: from prefect import flow from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync_run_and_wait_for_completion @flow def my_flow (): ... creds = CensusCredentials ( api_key = \"my_api_key\" ) run_result = trigger_census_sync_run_and_wait_for_completion ( credentials = creds , sync_id = 42 ) ... my_flow () Source code in prefect_census/syncs.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 @flow ( name = \"Trigger Census sync run and wait for completion\" , description = \"Triggers a Census sync run and waits for the\" \"triggered run to complete.\" , ) async def trigger_census_sync_run_and_wait_for_completion ( credentials : CensusCredentials , sync_id : int , force_full_sync : bool = False , max_wait_seconds : int = 900 , poll_frequency_seconds : int = 10 , ) -> Dict [ str , Any ]: \"\"\" Flow that triggers a sync run and waits for the triggered run to complete. Args: credentials: Credentials for authenticating with Census. sync_id: The ID of the sync to trigger. force_full_sync: If `True`, a full sync will be triggered. max_wait_seconds: Maximum number of seconds to wait for sync to complete poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Raises: CensusSyncRunCancelled: The triggered Census sync run was cancelled. CensusSyncRunFailed: The triggered Census sync run failed. RuntimeError: The triggered Census sync run ended in an unexpected state. Returns: The final run data returned by the Census API as dict with the following shape: ``` { \"id\": 94, \"sync_id\": 52, \"source_record_count\": 1, \"records_processed\": 1, \"records_updated\": 1, \"records_failed\": 0, \"records_invalid\": 0, \"created_at\": \"2021-10-20T02:51:07.546Z\", \"updated_at\": \"2021-10-20T02:52:29.236Z\", \"completed_at\": \"2021-10-20T02:52:29.234Z\", \"scheduled_execution_time\": null, \"error_code\": null, \"error_message\": null, \"error_detail\": null, \"status\": \"completed\", \"canceled\": false, \"full_sync\": true, \"sync_trigger_reason\": { \"ui_tag\": \"Manual\", \"ui_detail\": \"Manually triggered by test@getcensus.com\" } } ``` Examples: Trigger a Census sync using CensusCredentials instance and wait for completion as a standalone flow: ```python import asyncio from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync_run_and_wait_for_completion asyncio.run( trigger_census_sync_run_and_wait_for_completion( credentials=CensusCredentials( api_key=\"my_api_key\" ), sync_id=42 ) ) ``` Trigger a Census sync and wait for completion as a subflow: ```python from prefect import flow from prefect_census import CensusCredentials from prefect_census.syncs import trigger_census_sync_run_and_wait_for_completion @flow def my_flow(): ... creds = CensusCredentials(api_key=\"my_api_key\") run_result = trigger_census_sync_run_and_wait_for_completion( credentials=creds, sync_id=42 ) ... my_flow() ``` \"\"\" # noqa logger = get_run_logger () triggered_run_data_future = await trigger_census_sync . submit ( credentials = credentials , sync_id = sync_id , force_full_sync = force_full_sync ) run_id = await triggered_run_data_future . result () if run_id is None : raise RuntimeError ( \"Unable to determine run ID for triggered sync.\" ) final_run_status , run_data = await wait_census_sync_completion ( run_id = run_id , credentials = credentials , max_wait_seconds = max_wait_seconds , poll_frequency_seconds = poll_frequency_seconds , ) if final_run_status == CensusSyncRunStatus . COMPLETED : logger . info ( \"Census sync run with ID %s completed successfully!\" , run_id , ) return run_data elif final_run_status == CensusSyncRunStatus . CANCELLED : raise CensusSyncRunCancelled ( f \"Triggered sync run with ID { run_id } was cancelled.\" ) elif final_run_status == CensusSyncRunStatus . FAILED : raise CensusSyncRunFailed ( f \"Triggered sync run with ID: { run_id } failed.\" ) else : raise RuntimeError ( f \"Triggered sync run with ID: { run_id } ended with unexpected\" f \"status { final_run_status } \" )","title":"trigger_census_sync_run_and_wait_for_completion()"}]}